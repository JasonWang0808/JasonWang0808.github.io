<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junyu Wang&#39;s Blog</title>
  
  <subtitle>hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-05T23:18:38.376Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JunYu Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA 如何定义数组</title>
    <link href="http://yoursite.com/2019/03/05/Java_%E5%AE%9A%E4%B9%89%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/03/05/Java_定义数组/</id>
    <published>2019-03-05T23:18:38.376Z</published>
    <updated>2019-03-05T23:18:38.376Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JAVA真是个磨人的老妖精，总是出现一些奇奇怪怪的报错，害得我一上午上完课什么也没干，就google了一个怎么定义（key-value）数组。"><a href="#JAVA真是个磨人的老妖精，总是出现一些奇奇怪怪的报错，害得我一上午上完课什么也没干，就google了一个怎么定义（key-value）数组。" class="headerlink" title="JAVA真是个磨人的老妖精，总是出现一些奇奇怪怪的报错，害得我一上午上完课什么也没干，就google了一个怎么定义（key-value）数组。"></a>JAVA真是个磨人的老妖精，总是出现一些奇奇怪怪的报错，害得我一上午上完课什么也没干，就google了一个怎么定义（key-value）数组。</h4><h4 id="首先你需要定义一个inner-class来储存key-value-pair，然后建立这个inner-class-的数组-注意看程序是怎么实现的"><a href="#首先你需要定义一个inner-class来储存key-value-pair，然后建立这个inner-class-的数组-注意看程序是怎么实现的" class="headerlink" title="首先你需要定义一个inner class来储存key-value pair，然后建立这个inner class 的数组,注意看程序是怎么实现的"></a>首先你需要定义一个inner class来储存key-value pair，然后建立这个inner class 的数组,注意看程序是怎么实现的</h4><blockquote><p>以后记住，对于generic的inner class，都在后面加入generic同样的参数，就可以愉快的定义啦～</p></blockquote><h4 id="同时别忘了，定义完数组以后，初始化。打个比方，如果是hashtable，你需要把这个数组初始化一圈，不然他虽然成功定义了，但是里面的全是null"><a href="#同时别忘了，定义完数组以后，初始化。打个比方，如果是hashtable，你需要把这个数组初始化一圈，不然他虽然成功定义了，但是里面的全是null" class="headerlink" title="同时别忘了，定义完数组以后，初始化。打个比方，如果是hashtable，你需要把这个数组初始化一圈，不然他虽然成功定义了，但是里面的全是null"></a>同时别忘了，定义完数组以后，初始化。打个比方，如果是hashtable，你需要把这个数组初始化一圈，不然他虽然成功定义了，但是里面的全是null</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.print.Printable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> junyu</span></span><br><span class="line"><span class="comment"> * The goal here is to </span></span><br><span class="line"><span class="comment"> * 1. test generic class and its inner class</span></span><br><span class="line"><span class="comment"> * 2. try to set up the List of different types</span></span><br><span class="line"><span class="comment"> * 3. constructor don't need &lt;K,V&gt; </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> &lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">test</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">arr = <span class="keyword">new</span> ArrayList&lt;hashPair&gt;(<span class="number">10</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">arr.add(<span class="keyword">new</span> hashPair()); <span class="comment">// array always need to be initialized</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">private</span> List&lt;hashPair&gt; arr; <span class="comment">// this is similar to vector&lt;hashpair&gt; arr in c ++, </span></span><br><span class="line"><span class="comment">//if you want to build a bucket chained hash table, you can </span></span><br><span class="line"><span class="comment">//private List&lt;List&lt;hashPair&gt;&gt; hashList = new ArrayList&lt;List&lt;hashPair&gt;&gt;(10);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> junyu</span></span><br><span class="line"><span class="comment"> * 1. Build up the inner class, the goal of which is to build up the node storing the key-value pair</span></span><br><span class="line"><span class="comment"> * 2. Remember to add "&lt;K,V&gt;" or there will be mistakes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">hashPair</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">hashPair(K key, V value)&#123;</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">hashPair</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="keyword">this</span>.key = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.value = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> K key;</span><br><span class="line"><span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hashPair[] haPairs = <span class="keyword">new</span> hashPair[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">test&lt;String, Integer&gt; test1Test = <span class="keyword">new</span> test&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">System.out.print(test1Test.arr.size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) System.out.println(test1Test.arr.get(i).value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JAVA真是个磨人的老妖精，总是出现一些奇奇怪怪的报错，害得我一上午上完课什么也没干，就google了一个怎么定义（key-value）数组。&quot;&gt;&lt;a href=&quot;#JAVA真是个磨人的老妖精，总是出现一些奇奇怪怪的报错，害得我一上午上完课什么也没干，就googl
      
    
    </summary>
    
      <category term="CS400" scheme="http://yoursite.com/categories/CS400/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode Heap, priority queue</title>
    <link href="http://yoursite.com/2019/03/03/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/03/03/优先队列/</id>
    <published>2019-03-03T23:46:27.183Z</published>
    <updated>2019-03-04T00:01:25.038Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Leetcode-meeting-room"><a href="#Leetcode-meeting-room" class="headerlink" title="Leetcode meeting room"></a>Leetcode meeting room</h4><h3 id="这个问题来源于一道面试题：求无序不重复数组中第K大的数值-尽管可以用快排，但是heap是最优的，因为我们只需要对K个进行排序而不需要所有，因此我们来探究一下priority-queue（c-中对heap的包装，make-heap-heap-sort-heap-push）"><a href="#这个问题来源于一道面试题：求无序不重复数组中第K大的数值-尽管可以用快排，但是heap是最优的，因为我们只需要对K个进行排序而不需要所有，因此我们来探究一下priority-queue（c-中对heap的包装，make-heap-heap-sort-heap-push）" class="headerlink" title="这个问题来源于一道面试题：求无序不重复数组中第K大的数值,尽管可以用快排，但是heap是最优的，因为我们只需要对K个进行排序而不需要所有，因此我们来探究一下priority_queue（c++中对heap的包装，make_heap, heap_sort, heap_push）"></a>这个问题来源于一道面试题：求无序不重复数组中第K大的数值,尽管可以用快排，但是heap是最优的，因为我们只需要对K个进行排序而不需要所有，因此我们来探究一下priority_queue（c++中对heap的包装，make_heap, heap_sort, heap_push）</h3><h3 id="出于对快排的尊重，我们先来写一个快排-然后用优先队列"><a href="#出于对快排的尊重，我们先来写一个快排-然后用优先队列" class="headerlink" title="出于对快排的尊重，我们先来写一个快排, 然后用优先队列"></a>出于对快排的尊重，我们先来写一个快排, 然后用优先队列</h3><blockquote><p>快排又又又写错了，注意：1. 两边都是找绝对大于or绝对小于。2. 先右向左寻找，这样的话l，r将停留在一个小于pivot的地方 3. l在找到pivot之后不需要++</p></blockquote><h3 id="后来发现priority-queue这么好用，不如以后就用他了，省了很多事！但是要注意，如果说不从小到大排（意思是大元素在队出队），要自己定一个operator（queue的第三个参数，但同时要写入第二个参数（貌似是该类型的vector））"><a href="#后来发现priority-queue这么好用，不如以后就用他了，省了很多事！但是要注意，如果说不从小到大排（意思是大元素在队出队），要自己定一个operator（queue的第三个参数，但同时要写入第二个参数（貌似是该类型的vector））" class="headerlink" title="后来发现priority_queue这么好用，不如以后就用他了，省了很多事！但是要注意，如果说不从小到大排（意思是大元素在队出队），要自己定一个operator（queue的第三个参数，但同时要写入第二个参数（貌似是该类型的vector））"></a>后来发现priority_queue这么好用，不如以后就用他了，省了很多事！但是要注意，如果说不从小到大排（意思是大元素在队出队），要自己定一个operator（queue的第三个参数，但同时要写入第二个参数（貌似是该类型的vector））</h3><h3 id="相比之下，sort函数定义的只需要定一个bool函数即可"><a href="#相比之下，sort函数定义的只需要定一个bool函数即可" class="headerlink" title="- 相比之下，sort函数定义的只需要定一个bool函数即可"></a>- 相比之下，sort函数定义的只需要定一个bool函数即可</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by JunYu on 2018-12-30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vector1, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> begin = l;</span><br><span class="line">    <span class="keyword">int</span> end = r;</span><br><span class="line">    <span class="keyword">int</span> p = vector1[l];</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(vector1[r] &gt;= p &amp;&amp; l &lt; r)&#123;</span><br><span class="line">            r --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(vector1[l] &lt;= p &amp;&amp; l &lt; r)&#123;</span><br><span class="line">            l ++;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(vector1[l], vector1[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(vector1[l], vector1[begin]);</span><br><span class="line">    quicksort(vector1, begin, l<span class="number">-1</span>);</span><br><span class="line">    quicksort(vector1, l + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a &gt; b means from bigger to smaller</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">comp</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// the goal is to find the K-minimal value in the list</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vector1 = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    quicksort(vector1, <span class="number">0</span>, vector1.size()<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vector1[k<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// cout the outcome of quicksort</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vector2 = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, comp&gt; priority_queue1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector2.size(); i ++)&#123;</span><br><span class="line">        priority_queue1.push(vector2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k<span class="number">-1</span>; i ++) &#123;</span><br><span class="line">        priority_queue1.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;priority_queue1.top(); <span class="comment">// the outcome of heap</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Leetcode-meeting-room&quot;&gt;&lt;a href=&quot;#Leetcode-meeting-room&quot; class=&quot;headerlink&quot; title=&quot;Leetcode meeting room&quot;&gt;&lt;/a&gt;Leetcode meeting room&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tree (AVL, Red-Black, B(2-3))</title>
    <link href="http://yoursite.com/2019/03/02/%E6%A0%91/"/>
    <id>http://yoursite.com/2019/03/02/树/</id>
    <published>2019-03-02T20:48:16.146Z</published>
    <updated>2019-03-02T20:48:16.146Z</updated>
    
    <content type="html"><![CDATA[<h5 id="AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便"><a href="#AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便" class="headerlink" title="AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便"></a>AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便</h5><blockquote><p>拥有一个内部结点key以及两个两个子结点，这个叫做<strong>2结点</strong>; 拥有两个内部结点key以及三个子结点，这个叫做<strong>3结点</strong> </p></blockquote><p><a href="https://drive.google.com/file/d/1Fm1NF2vJHWVIDFvnrCxi6d5aHtM9UnWw/view?usp=sharing" target="_blank" rel="noopener">这里有一个简单2-3树（B树的一种）的解释</a></p><p><a href="https://juejin.im/post/5b7e00456fb9a01a0b3193c7" target="_blank" rel="noopener">可以参考这里2-3Tree的插入过程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便&quot;&gt;&lt;a href=&quot;#AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode classical problem</title>
    <link href="http://yoursite.com/2019/03/01/leetocde_classic/"/>
    <id>http://yoursite.com/2019/03/01/leetocde_classic/</id>
    <published>2019-03-01T19:31:27.515Z</published>
    <updated>2019-03-01T19:31:27.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="big-number-multiply"><a href="#big-number-multiply" class="headerlink" title="big number multiply"></a>big number multiply</h3><blockquote><p>will over flow if you transfer them into number and do the product. </p></blockquote><h4 id="因此逐位相乘，下面这行代码可以说明一切"><a href="#因此逐位相乘，下面这行代码可以说明一切" class="headerlink" title="因此逐位相乘，下面这行代码可以说明一切"></a>因此逐位相乘，下面这行代码可以说明一切</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector1[i+j] = (string1[i] - <span class="string">'0'</span> * string2[i] - <span class="string">'0'</span>);// 利用了乘法的性质，把相同位数的加到一起</span><br><span class="line">// vector1中会存在有些元素比<span class="number">10</span>大，因此从尾到头遍历一遍，进行进位。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;big-number-multiply&quot;&gt;&lt;a href=&quot;#big-number-multiply&quot; class=&quot;headerlink&quot; title=&quot;big number multiply&quot;&gt;&lt;/a&gt;big number multiply&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>B-Tree(AVL, Red-Black, B(2-3))</title>
    <link href="http://yoursite.com/2019/03/01/B-tree/"/>
    <id>http://yoursite.com/2019/03/01/B-tree/</id>
    <published>2019-03-01T19:31:27.515Z</published>
    <updated>2019-03-03T23:59:56.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Red-Black-Tree"><a href="#Red-Black-Tree" class="headerlink" title="Red-Black Tree"></a>Red-Black Tree</h3><blockquote><p>Balance factor显示了是否要进行旋转。BF = height_left - height_right</p></blockquote><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><h5 id="1-根结点必须是黑色"><a href="#1-根结点必须是黑色" class="headerlink" title="1. 根结点必须是黑色"></a>1. 根结点必须是黑色</h5><h5 id="2-红色结点的子结点必须是黑色"><a href="#2-红色结点的子结点必须是黑色" class="headerlink" title="2. 红色结点的子结点必须是黑色"></a>2. 红色结点的子结点必须是黑色</h5><h5 id="3-根结点到任意一个叶子结点路径上的黑色结点数相同"><a href="#3-根结点到任意一个叶子结点路径上的黑色结点数相同" class="headerlink" title="3. 根结点到任意一个叶子结点路径上的黑色结点数相同"></a>3. 根结点到任意一个叶子结点路径上的黑色结点数相同</h5><h4 id="How-to-fix"><a href="#How-to-fix" class="headerlink" title="How to fix"></a>How to fix</h4><blockquote><p>当违反了规则的时候，我们把它称为R.P.V(Red Properties Violation)</p></blockquote><blockquote><p>(<a href="https://github.com/JasonWang0808/blog_reference/blob/master/pictures/Red-black.png" target="_blank" rel="noopener">https://github.com/JasonWang0808/blog_reference/blob/master/pictures/Red-black.png</a>)</p></blockquote><h5 id="1-Recoloring-—-when-the-parent’s-sibling-is-red-but-you-need-recolor-the-root-to-be-black-in-the-end"><a href="#1-Recoloring-—-when-the-parent’s-sibling-is-red-but-you-need-recolor-the-root-to-be-black-in-the-end" class="headerlink" title="1. Recoloring — when the parent’s sibling is red, but you need recolor the root to be black in the end;"></a>1. Recoloring — when the parent’s sibling is red, but you need recolor the root to be black in the end;</h5><h5 id="2-Reconstruting-—-when-the-parent’s-sibling-is-black-or-null"><a href="#2-Reconstruting-—-when-the-parent’s-sibling-is-black-or-null" class="headerlink" title="2. Reconstruting — when the parent’s sibling is black or null"></a>2. Reconstruting — when the parent’s sibling is black or null</h5><h4 id="Hints"><a href="#Hints" class="headerlink" title="Hints:"></a>Hints:</h4><h5 id="1-每一次插入的都是红色"><a href="#1-每一次插入的都是红色" class="headerlink" title="1. 每一次插入的都是红色"></a>1. 每一次插入的都是红色</h5><h5 id="2-left-rotate-是指-Grandparent-变为parent的左孩子"><a href="#2-left-rotate-是指-Grandparent-变为parent的左孩子" class="headerlink" title="2. left-rotate 是指 Grandparent 变为parent的左孩子"></a>2. left-rotate 是指 Grandparent 变为parent的左孩子</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">G</span>.<span class="keyword">right</span> = <span class="type">P</span>.<span class="keyword">right</span>;</span><br><span class="line"><span class="type">P</span>.<span class="keyword">right</span> = <span class="type">G</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="type">P</span>; <span class="comment">// 返回新的根结点</span></span><br></pre></td></tr></table></figure><h5 id="3-复杂度全部为log-N-遍历还是n。"><a href="#3-复杂度全部为log-N-遍历还是n。" class="headerlink" title="3. 复杂度全部为log(N),遍历还是n。"></a>3. 复杂度全部为log(N),遍历还是n。</h5><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><h5 id="AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便"><a href="#AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便" class="headerlink" title="AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便"></a>AVL解决了BST插入不平衡的问题，但是要进行旋转，复杂度较高，因此提出2-3Tree，使得插入更加简便</h5><blockquote><p>拥有一个内部结点key以及两个两个子结点，这个叫做<strong>2结点</strong>; 拥有两个内部结点key以及三个子结点，这个叫做<strong>3结点</strong> </p></blockquote><h5 id="这里可以看到一个对B-Tree简单的笔记，介绍了性质"><a href="#这里可以看到一个对B-Tree简单的笔记，介绍了性质" class="headerlink" title="这里可以看到一个对B-Tree简单的笔记，介绍了性质"></a>这里可以看到一个对B-Tree简单的笔记，介绍了性质</h5><blockquote><p>(<a href="https://github.com/JasonWang0808/blog_reference/blob/master/pictures/Btree.png" target="_blank" rel="noopener">https://github.com/JasonWang0808/blog_reference/blob/master/pictures/Btree.png</a>)</p></blockquote><p><a href="https://juejin.im/post/5b7e00456fb9a01a0b3193c7" target="_blank" rel="noopener">可以参考这里2-3Tree的插入过程</a></p><h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B+ tree"></a>B+ tree</h3><blockquote><p>B+ tree是Btree的升级，主要改变在以下几个方面</p></blockquote><h4 id="B-tree独有的性质"><a href="#B-tree独有的性质" class="headerlink" title="B+ tree独有的性质"></a>B+ tree独有的性质</h4><h6 id="1-有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。"><a href="#1-有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。" class="headerlink" title="1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。"></a>1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。</h6><h6 id="2-所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。"><a href="#2-所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。" class="headerlink" title="2.所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。"></a>2.所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</h6><h6 id="3-所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。"><a href="#3-所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。" class="headerlink" title="3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。"></a>3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</h6><h4 id="B-Tree的好处"><a href="#B-Tree的好处" class="headerlink" title="B+ Tree的好处"></a>B+ Tree的好处</h4><h5 id="1-单一结点可以储存更多的元素，减少IO的次数"><a href="#1-单一结点可以储存更多的元素，减少IO的次数" class="headerlink" title="1. 单一结点可以储存更多的元素，减少IO的次数"></a>1. 单一结点可以储存更多的元素，减少IO的次数</h5><h5 id="2-所有的data（Satellite-Information）都存在叶结点，每一次的查询都很稳定"><a href="#2-所有的data（Satellite-Information）都存在叶结点，每一次的查询都很稳定" class="headerlink" title="2. 所有的data（Satellite Information）都存在叶结点，每一次的查询都很稳定"></a>2. 所有的data（Satellite Information）都存在叶结点，每一次的查询都很稳定</h5><h5 id="3-叶结点中有指针相互连接，使得查询某个范围中的数据集合更加方便（对于B树可能要不断回溯才能找到下一范围）"><a href="#3-叶结点中有指针相互连接，使得查询某个范围中的数据集合更加方便（对于B树可能要不断回溯才能找到下一范围）" class="headerlink" title="3. 叶结点中有指针相互连接，使得查询某个范围中的数据集合更加方便（对于B树可能要不断回溯才能找到下一范围）"></a>3. 叶结点中有指针相互连接，使得查询某个范围中的数据集合更加方便（对于B树可能要不断回溯才能找到下一范围）</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Red-Black-Tree&quot;&gt;&lt;a href=&quot;#Red-Black-Tree&quot; class=&quot;headerlink&quot; title=&quot;Red-Black Tree&quot;&gt;&lt;/a&gt;Red-Black Tree&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Balance f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetocde回溯法(Back Tracking)</title>
    <link href="http://yoursite.com/2019/02/28/%E5%9B%9E%E6%BA%AF/"/>
    <id>http://yoursite.com/2019/02/28/回溯/</id>
    <published>2019-02-28T21:12:58.118Z</published>
    <updated>2019-02-28T21:15:07.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h3><h4 id="对于这种组合问题，只有三种情况"><a href="#对于这种组合问题，只有三种情况" class="headerlink" title="对于这种组合问题，只有三种情况"></a>对于这种组合问题，只有三种情况</h4><h4 id="1-（多次）选择当前"><a href="#1-（多次）选择当前" class="headerlink" title="1. （多次）选择当前"></a>1. （多次）选择当前</h4><h4 id="2-选择当前"><a href="#2-选择当前" class="headerlink" title="2. 选择当前"></a>2. 选择当前</h4><h4 id="3-不选当前"><a href="#3-不选当前" class="headerlink" title="3. 不选当前"></a>3. 不选当前</h4><h4 id="很多时候用递归，可能两个分支会递归到同一种状态，最后导致结果的重复（见下图）"><a href="#很多时候用递归，可能两个分支会递归到同一种状态，最后导致结果的重复（见下图）" class="headerlink" title="很多时候用递归，可能两个分支会递归到同一种状态，最后导致结果的重复（见下图）"></a>很多时候用递归，可能两个分支会递归到同一种状态，最后导致结果的重复（见下图）</h4><h4 id="因此我们可以将函数的主体改为一个for循环"><a href="#因此我们可以将函数的主体改为一个for循环" class="headerlink" title="因此我们可以将函数的主体改为一个for循环"></a>因此我们可以将函数的主体改为一个for循环</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">for</span>(<span class="attribute">i </span>: I)&#123;</span><br><span class="line"><span class="selector-tag">vector1</span><span class="selector-class">.push_back</span>(i); <span class="comment">// 选择当前</span></span><br><span class="line"><span class="selector-tag">Solve</span>();<span class="comment">// 假定选择当前进行处理</span></span><br><span class="line"><span class="selector-tag">vector</span><span class="selector-class">.pop_back</span>(); <span class="comment">// 不选当前</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-39-40-microsoft"><a href="#leetcode-39-40-microsoft" class="headerlink" title="leetcode 39, 40 (microsoft)"></a>leetcode 39, 40 (microsoft)</h4><blockquote><p>the goal is to find </p></blockquote><h5 id="39可以利用上面的方法进行求解。"><a href="#39可以利用上面的方法进行求解。" class="headerlink" title="39可以利用上面的方法进行求解。"></a>39可以利用上面的方法进行求解。</h5><h5 id="40-又多了一个trick"><a href="#40-又多了一个trick" class="headerlink" title="40 又多了一个trick"></a>40 又多了一个trick</h5><blockquote><p>[1,1,2,5,1] , 1+2+5 = 2+5+1 = 8,因此会得到相同的3组解。</p></blockquote><h5 id="我们把这个理解成，“只看个数”不看顺序，假如3个1中，出现了一个没选，那剩下的都不能选。"><a href="#我们把这个理解成，“只看个数”不看顺序，假如3个1中，出现了一个没选，那剩下的都不能选。" class="headerlink" title="我们把这个理解成，“只看个数”不看顺序，假如3个1中，出现了一个没选，那剩下的都不能选。"></a>我们把这个理解成，“只看个数”不看顺序，假如3个1中，出现了一个没选，那剩下的都不能选。</h5><blockquote><p>比如牛肉面加肉，有三块牛腩可以加。但是第一块很小，第二块中等，第三块最大。每一块价格相同，不能跳着选。要想吃到第三块牛肉就要把第一块第二块都选中。 中途放弃的后面的也别想要。这就是这个题如何避免重复解的原理</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;出错原因&quot;&gt;&lt;a href=&quot;#出错原因&quot; class=&quot;headerlink&quot; title=&quot;出错原因&quot;&gt;&lt;/a&gt;出错原因&lt;/h3&gt;&lt;h4 id=&quot;对于这种组合问题，只有三种情况&quot;&gt;&lt;a href=&quot;#对于这种组合问题，只有三种情况&quot; class=&quot;header
      
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Data Structure(4) The using of Set/map</title>
    <link href="http://yoursite.com/2019/01/08/DS_SetMap/"/>
    <id>http://yoursite.com/2019/01/08/DS_SetMap/</id>
    <published>2019-01-08T06:48:05.113Z</published>
    <updated>2019-03-07T05:48:42.818Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Set的使用"><a href="#1-Set的使用" class="headerlink" title="1. Set的使用"></a>1. Set的使用</h4><h5 id="可以当作hash-table进行使用"><a href="#可以当作hash-table进行使用" class="headerlink" title="可以当作hash table进行使用"></a>可以当作hash table进行使用</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; hashtable;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() ; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashtable.find(nums[i]) == hashtable.end())&#123;<span class="comment">// 相当于在hash table中按照index寻找</span></span><br><span class="line">                hashtable.insert(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                hashtable.erase(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> *hashtable.begin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可用于储存在计算过程中的过程，leetcode202 happy number就需要储存计算中曾经出现过哪些数字。</p></blockquote><p>使用insert排着插入即可</p><blockquote><p>Leetcode 349求补集<br>注意vector和set之间可以直接一键转换。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vector1(s1.begin(), s1.end());</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="2-map类似于python中的dict"><a href="#2-map类似于python中的dict" class="headerlink" title="2. map类似于python中的dict"></a>2. map类似于python中的dict</h4><h4 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h4><p>map和set在底层都是一棵平衡二叉树，有unordered_map和unordered_set底层是哈希表实现<br>而ordered_map 和ordered_set是Red-Black实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-Set的使用&quot;&gt;&lt;a href=&quot;#1-Set的使用&quot; class=&quot;headerlink&quot; title=&quot;1. Set的使用&quot;&gt;&lt;/a&gt;1. Set的使用&lt;/h4&gt;&lt;h5 id=&quot;可以当作hash-table进行使用&quot;&gt;&lt;a href=&quot;#可以当作hash-
      
    
    </summary>
    
      <category term="DS" scheme="http://yoursite.com/categories/DS/"/>
    
    
  </entry>
  
  <entry>
    <title>Data Structure(1) Linked List</title>
    <link href="http://yoursite.com/2019/01/07/DT_LinkedList1/"/>
    <id>http://yoursite.com/2019/01/07/DT_LinkedList1/</id>
    <published>2019-01-08T00:57:45.895Z</published>
    <updated>2019-01-08T00:57:45.896Z</updated>
    
    <content type="html"><![CDATA[<ol start="206"><li>Reverse Linked List</li><li>Reverse Linked List 2<br>考察链表的指针操作  </li></ol><p>Notes: 要充分注意首尾是否指针为空</p><p>Tips：<strong>虚拟头节点</strong></p><blockquote><p>可以定义一个dummyHead作为head前面的标志性指针, 好处是，不管head怎样变化，只要调用其next总能找到现在的head（203，82）</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListNode *dummyHead = ListNode(-<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">dummyHead-&gt;next = head<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>对于特定的92号问题，反转链表，我们可以通过一个函数返回两个数据：  </p><ol><li>最左边的元素  </li><li>原本最左边的元素的next</li></ol><p>在链表中穿针引线（23，24，124，125， 237）<br>双指针（61，143，234，19）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol start=&quot;206&quot;&gt;
&lt;li&gt;Reverse Linked List&lt;/li&gt;
&lt;li&gt;Reverse Linked List 2&lt;br&gt;考察链表的指针操作  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notes: 要充分注意首尾是否指针为空&lt;/p&gt;
&lt;p&gt;Tips：&lt;stron
      
    
    </summary>
    
      <category term="DT" scheme="http://yoursite.com/categories/DT/"/>
    
    
      <category term="DT" scheme="http://yoursite.com/tags/DT/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure(1) Linked List</title>
    <link href="http://yoursite.com/2019/01/07/DS_LinkedList/"/>
    <id>http://yoursite.com/2019/01/07/DS_LinkedList/</id>
    <published>2019-01-07T16:12:50.611Z</published>
    <updated>2019-01-08T06:49:32.671Z</updated>
    
    <content type="html"><![CDATA[<ol start="206"><li>Reverse Linked List</li><li>Reverse Linked List 2<br>考察链表的指针操作  </li></ol><p>Notes: 要充分注意首尾是否指针为空</p><p>Tips：<strong>虚拟头节点</strong></p><blockquote><p>可以定义一个dummyHead作为head前面的标志性指针, 好处是，不管head怎样变化，只要调用其next总能找到现在的head（203，82）</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListNode *dummyHead = ListNode(-<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">dummyHead-&gt;next = head<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>对于特定的92号问题，反转链表，我们可以通过一个函数返回两个数据：  </p><ol><li>最左边的元素  </li><li>原本最左边的元素的next</li></ol><p>在链表中穿针引线（23，24，124，125， 237）<br>双指针（61，143，234，19）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol start=&quot;206&quot;&gt;
&lt;li&gt;Reverse Linked List&lt;/li&gt;
&lt;li&gt;Reverse Linked List 2&lt;br&gt;考察链表的指针操作  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notes: 要充分注意首尾是否指针为空&lt;/p&gt;
&lt;p&gt;Tips：&lt;stron
      
    
    </summary>
    
      <category term="DS" scheme="http://yoursite.com/categories/DS/"/>
    
    
      <category term="DS" scheme="http://yoursite.com/tags/DS/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure(2) Stack VS queue</title>
    <link href="http://yoursite.com/2019/01/07/DS_stack/"/>
    <id>http://yoursite.com/2019/01/07/DS_stack/</id>
    <published>2019-01-07T15:33:05.416Z</published>
    <updated>2019-01-09T15:12:54.354Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><h5 id="Stack，又名堆，后进先出问题。非常经典的一个括号匹配问题就是出自Stack之手。"><a href="#Stack，又名堆，后进先出问题。非常经典的一个括号匹配问题就是出自Stack之手。" class="headerlink" title="Stack，又名堆，后进先出问题。非常经典的一个括号匹配问题就是出自Stack之手。"></a>Stack，又名堆，后进先出问题。非常经典的一个括号匹配问题就是出自Stack之手。</h5><h5 id="Queue，又名队列，先进先出，常用于对“TreeNode”的层级问题的解答，因为每一层都可以看作是一个队列来进行处理。常用Vector-lt-Vector-gt-来进行计算"><a href="#Queue，又名队列，先进先出，常用于对“TreeNode”的层级问题的解答，因为每一层都可以看作是一个队列来进行处理。常用Vector-lt-Vector-gt-来进行计算" class="headerlink" title="Queue，又名队列，先进先出，常用于对“TreeNode”的层级问题的解答，因为每一层都可以看作是一个队列来进行处理。常用Vector&lt;Vector&gt;来进行计算"></a>Queue，又名队列，先进先出，常用于对“TreeNode”的层级问题的解答，因为每一层都可以看作是一个队列来进行处理。常用Vector&lt;Vector<int>&gt;来进行计算</int></h5><blockquote><p>102,103,104,199都可以用队列来解答</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stack常用用法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="built_in">stack</span>&lt; pair &lt;Node*, <span class="keyword">int</span>&gt;&gt; s1; <span class="comment">//设立一个包含pair的Stack  </span></span><br><span class="line">s1.top();</span><br><span class="line">s1.push_back();</span><br><span class="line">s1.pop();</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// queue常用用法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="built_in">queue</span>&lt;&lt; pair &lt;Node*, <span class="keyword">int</span>&gt;&gt; q1; <span class="comment">//设立一个包含pair的Stack  </span></span><br><span class="line">s1.top();</span><br><span class="line">s1.push();</span><br><span class="line">s1.pop();</span><br></pre></td></tr></table></figure><h4 id="二、图论应用"><a href="#二、图论应用" class="headerlink" title="二、图论应用"></a>二、图论应用</h4><blockquote><p>类似练习127，126<br>例如leetcode279题，寻找相加平方数最少的一种方案。<br>我们可以将其想像成求无权边的最短路径，使用BFS</p></blockquote><blockquote><p>例如计算9，首先8–&gt;9(1), 5–&gt;9(2), 0–&gt;9(3) , 9就连接了三个顶点分别是0,5,8</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Leetcode279</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; isvisit(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        isvisit[n] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; queue1;</span><br><span class="line">        queue1.push(make_pair(n, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(queue1.empty() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> Node_n = queue1.front().first;</span><br><span class="line">            <span class="keyword">int</span> dis = queue1.front().second;</span><br><span class="line">            queue1.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; ; i ++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = i * i;</span><br><span class="line">                <span class="keyword">if</span>(temp &gt; Node_n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(temp == Node_n)&#123;</span><br><span class="line">                    <span class="keyword">return</span> dis + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(isvisit[Node_n - temp] == <span class="number">0</span> )&#123;</span><br><span class="line">                        queue1.push(make_pair(Node_n - temp, dis+<span class="number">1</span>));</span><br><span class="line">                        isvisit[Node_n - temp] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="三、优先队列"><a href="#三、优先队列" class="headerlink" title="三、优先队列"></a>三、优先队列</h4><p>优先队列其实就是一个堆，只是能应用的逻辑相对比较简单</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, function&lt;<span class="keyword">bool</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; &gt; pq1(mycmp);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mycpmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b; <span class="comment">//大的元素在队列首</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：Leetcode347。</p><p>Tips：  </p><ol><li>建立一个map，类似Wordcount</li><li>队列的pair运用第一个元素比较，因此要把pair的第一个元素设置成频率。  </li><li>while循环别把empty的标志设置反</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topKFrequent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line"></span><br><span class="line">        assert(k &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.size() ; i ++)&#123;</span><br><span class="line">            freq[nums[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assert(k &lt;= freq.size());</span><br><span class="line"></span><br><span class="line">        priority_queue&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; &gt; pq;</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator iter = freq.begin() ; iter != freq.end() ; iter ++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pq.size() == k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(iter-&gt;second &gt; pq.top().first)&#123;</span><br><span class="line">                    pq.pop();</span><br><span class="line">                    pq.push(make_pair(iter-&gt;second, iter-&gt;first));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                pq.push(make_pair(iter-&gt;second, iter-&gt;first));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            res.push_back(pq.top().second);</span><br><span class="line">            pq.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一、基本介绍&quot;&gt;&lt;/a&gt;一、基本介绍&lt;/h4&gt;&lt;h5 id=&quot;Stack，又名堆，后进先出问题。非常经典的一个括号匹配问题就是出自Stack之手。&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="DS" scheme="http://yoursite.com/categories/DS/"/>
    
    
  </entry>
  
  <entry>
    <title>收到offer之后的申请流程</title>
    <link href="http://yoursite.com/2018/11/27/wisc_prepare/"/>
    <id>http://yoursite.com/2018/11/27/wisc_prepare/</id>
    <published>2018-11-27T11:50:28.000Z</published>
    <updated>2018-11-27T11:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我们这里以UW-Madison为例讲一下留学得到offer后的操作"><a href="#我们这里以UW-Madison为例讲一下留学得到offer后的操作" class="headerlink" title="我们这里以UW-Madison为例讲一下留学得到offer后的操作"></a>我们这里以UW-Madison为例讲一下留学得到offer后的操作</h3><h4 id="先给出一个流程图，大概说一下整个的流程"><a href="#先给出一个流程图，大概说一下整个的流程" class="headerlink" title="先给出一个流程图，大概说一下整个的流程"></a>先给出一个流程图，大概说一下整个的流程</h4><p> <img src="/images/qianzheng/process.jpg" width="300" height="200" alt="img1" align="center"></p><h4 id="1-首先要做的当然是Accept-offer"><a href="#1-首先要做的当然是Accept-offer" class="headerlink" title="1. 首先要做的当然是Accept offer"></a>1. 首先要做的当然是<strong>Accept offer</strong></h4><h4 id="2-接着我们需要拿到一个叫做I-20的文件（这个每个学校的操作可能各有不同）"><a href="#2-接着我们需要拿到一个叫做I-20的文件（这个每个学校的操作可能各有不同）" class="headerlink" title="2. 接着我们需要拿到一个叫做I-20的文件（这个每个学校的操作可能各有不同）"></a>2. 接着我们需要拿到一个叫做I-20的文件（这个每个学校的操作可能各有不同）</h4><blockquote><p><a href="https://www.admissions.wisc.edu/admitted/checklist/spring_international.php" target="_blank" rel="noopener">Checklist 4. 中列出了需要的文件</a></p></blockquote><h4 id="申请I20在UW-Madison一共需要4个文件"><a href="#申请I20在UW-Madison一共需要4个文件" class="headerlink" title="申请I20在UW-Madison一共需要4个文件"></a>申请I20在UW-Madison一共需要4个文件</h4><ul><li style="list-style: none"><input type="checkbox" checked> <a href="https://www.admissions.wisc.edu/assets/pdfs/UW_Financial_Verification_Form.pdf" target="_blank" rel="noopener">Financial Verification Form</a></li><li style="list-style: none"><input type="checkbox" checked> 存款证明</li><li style="list-style: none"><input type="checkbox" checked> <a href="https://www.admissions.wisc.edu/assets/pdfs/UW_VISA_Form.pdf/" target="_blank" rel="noopener">Student Visa Information and Mailing Form</a></li><li style="list-style: none"><input type="checkbox" checked> Copies of passport pages showing your identity and full legal name</li></ul><h5 id="准备好了四个文件，将pdf发给onwisconsin-admissions-wisc-edu就结束了I20的申请"><a href="#准备好了四个文件，将pdf发给onwisconsin-admissions-wisc-edu就结束了I20的申请" class="headerlink" title="准备好了四个文件，将pdf发给onwisconsin@admissions.wisc.edu就结束了I20的申请"></a>准备好了四个文件，将pdf发给<a href="mailto:onwisconsin@admissions.wisc.edu" target="_blank" rel="noopener">onwisconsin@admissions.wisc.edu</a>就结束了I20的申请</h5><h4 id="3-等待I-20，这是一个漫长的过程，大概需要两个半星期"><a href="#3-等待I-20，这是一个漫长的过程，大概需要两个半星期" class="headerlink" title="3. 等待I-20，这是一个漫长的过程，大概需要两个半星期"></a>3. 等待I-20，这是一个漫长的过程，大概需要两个半星期</h4><h4 id="4-1-拿到I-20之后就要申请F-1签证了"><a href="#4-1-拿到I-20之后就要申请F-1签证了" class="headerlink" title="4.1 拿到I-20之后就要申请F-1签证了"></a>4.1 拿到I-20之后就要申请F-1签证了</h4><blockquote><p>这里UW-Madison给出了一些<a href="https://www.admissions.wisc.edu/assets/pdfs/obtainvisa.pdf" target="_blank" rel="noopener">F-1签证的tips</a></p></blockquote><p>但是个人感觉上述说的不是很具体，这里给出两个比较生动形象的公众号贴文 (<a href="https://mp.weixin.qq.com/s/-tSUKd-a01NGkra7UxZx0w" target="_blank" rel="noopener">文章1</a>，<a href="https://mp.weixin.qq.com/s/1mStu5ztzIugQR8D7Hkp7Q" target="_blank" rel="noopener">文章2</a>)<br>看完这两个文章，并准备好相应的材料就可以预约面签了  </p><h4 id="4-2-与此同时我们应该开始准备Placement-Test了"><a href="#4-2-与此同时我们应该开始准备Placement-Test了" class="headerlink" title="4.2 与此同时我们应该开始准备Placement Test了"></a>4.2 与此同时我们应该开始准备Placement Test了</h4><blockquote><p><a href="https://exams.wisc.edu/placement/uw-madison-students.php" target="_blank" rel="noopener">这里是FAQ</a>  届时会有邮件通知我们需要参加什么类别的考试<br>点击-&gt; <a href="https://exams.wisc.edu/placement/regionaltesting/information.php" target="_blank" rel="noopener">进入注册placement test</a>  </p></blockquote><blockquote><p><a href="https://soar.wisc.edu/" target="_blank" rel="noopener">同样可以在SOAR 2.中看到详细信息</a>  </p></blockquote><h4 id="5-拿到F-1签证准备好行李顺顺利利去上学"><a href="#5-拿到F-1签证准备好行李顺顺利利去上学" class="headerlink" title="5. 拿到F-1签证准备好行李顺顺利利去上学"></a>5. 拿到F-1签证准备好行李顺顺利利去上学</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;我们这里以UW-Madison为例讲一下留学得到offer后的操作&quot;&gt;&lt;a href=&quot;#我们这里以UW-Madison为例讲一下留学得到offer后的操作&quot; class=&quot;headerlink&quot; title=&quot;我们这里以UW-Madison为例讲一下留学得到of
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>how to use Ubuntu and Git to push projects</title>
    <link href="http://yoursite.com/2018/11/19/Ubuntu-git/"/>
    <id>http://yoursite.com/2018/11/19/Ubuntu-git/</id>
    <published>2018-11-19T12:28:46.000Z</published>
    <updated>2019-01-29T05:22:11.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Step1-配置SSH-key并输入到github上"><a href="#Step1-配置SSH-key并输入到github上" class="headerlink" title="Step1. 配置SSH key并输入到github上"></a>Step1. 配置SSH key并输入到github上</h3><blockquote><p>见下面</p></blockquote><h3 id="Step2-手动添加仓库或者直接clone"><a href="#Step2-手动添加仓库或者直接clone" class="headerlink" title="Step2. 手动添加仓库或者直接clone"></a>Step2. <a href="https://blog.csdn.net/chenguolinblog/article/details/19929509" target="_blank" rel="noopener">手动添加仓库或者直接clone</a></h3><h3 id="Step3-添加成为contributor"><a href="#Step3-添加成为contributor" class="headerlink" title="Step3. 添加成为contributor"></a>Step3. <a href="https://segmentfault.com/a/1190000015798490" target="_blank" rel="noopener">添加成为contributor</a></h3><p>首先下载git，这个不用我说了<br>在github上建立一个名字为XXX的仓库作为你要托管的对象，这里我采用learn-repo作为我的名字  </p><blockquote><p>JasonWang0808/Learn-repo</p></blockquote><p>在Ubuntu下生成SSH key来连接自己的github，可以参考<a href="https://segmentfault.com/a/1190000013154540" target="_blank" rel="noopener">这个博文</a>, 此处也不啰嗦  </p><p>接下来在ubuntu中建立一个文件夹作为本地仓库</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 初始化</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="meta"># 建立文件（以及做出类似改动）</span></span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line"></span><br><span class="line"><span class="meta"># 提交本次的改动，注意后面的注释参数不要拉下</span></span><br><span class="line">git commit -m <span class="string">'first_commit'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 建立远程连接 origin就是仓库名字而已，允许修改</span></span><br><span class="line">git remote add origin https:<span class="comment">//github.com/JasonWang0808/learn-repo.git</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 将新的仓库内容push到刚刚命名的origin，并且为master分支  </span></span><br><span class="line">git push origin master</span><br><span class="line">---------------------</span><br></pre></td></tr></table></figure><p>遇到的坑</p><ol><li>直接复制文件夹过来上传后是灰色的</li></ol><blockquote><p>不知道为啥，自己新建然后cp吧</p></blockquote><ol start="2"><li>报错：error:failed to push som refs to……</li></ol><blockquote><p>git pull –rebase origin master   可能是本地和远程有区别等原因</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Step1-配置SSH-key并输入到github上&quot;&gt;&lt;a href=&quot;#Step1-配置SSH-key并输入到github上&quot; class=&quot;headerlink&quot; title=&quot;Step1. 配置SSH key并输入到github上&quot;&gt;&lt;/a&gt;Step1. 
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hidden Markov Model，HMM</title>
    <link href="http://yoursite.com/2018/11/18/HMM/"/>
    <id>http://yoursite.com/2018/11/18/HMM/</id>
    <published>2018-11-19T02:25:44.000Z</published>
    <updated>2018-11-19T02:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>  <h3 id="隐马尔可夫模型在词性标注上的应用"><a href="#隐马尔可夫模型在词性标注上的应用" class="headerlink" title="隐马尔可夫模型在词性标注上的应用"></a>隐马尔可夫模型在词性标注上的应用</h3><blockquote><p>给定前提我们只关注N/M/V三个词性  </p></blockquote><h4 id="首先介绍第一个概念-Emission-Probabilities"><a href="#首先介绍第一个概念-Emission-Probabilities" class="headerlink" title="首先介绍第一个概念  Emission Probabilities"></a>首先介绍第一个概念  Emission Probabilities</h4><h4 id="gt-是指同一种状态各个数值得可能性，可以看下图"><a href="#gt-是指同一种状态各个数值得可能性，可以看下图" class="headerlink" title="&gt; 是指同一种状态各个数值得可能性，可以看下图"></a>&gt; 是指同一种状态各个数值得可能性，可以看下图</h4><p><img src="/images/NLP/HMM/1.png" alt="">  </p><h4 id="我们可以看到，当认为是当前词语是N的时候有4-9的可能性是mary"><a href="#我们可以看到，当认为是当前词语是N的时候有4-9的可能性是mary" class="headerlink" title="我们可以看到，当认为是当前词语是N的时候有4/9的可能性是mary"></a>我们可以看到，当认为是当前词语是N的时候有4/9的可能性是mary</h4><h4 id="接下来是第二个概念-Transition-Probabilities"><a href="#接下来是第二个概念-Transition-Probabilities" class="headerlink" title="接下来是第二个概念  Transition Probabilities"></a>接下来是第二个概念  Transition Probabilities</h4><h4 id="gt-指状态之间的转换概率，S-E分别表示开始和结束，看下图"><a href="#gt-指状态之间的转换概率，S-E分别表示开始和结束，看下图" class="headerlink" title="&gt; 指状态之间的转换概率，S/E分别表示开始和结束，看下图"></a>&gt; 指状态之间的转换概率，S/E分别表示开始和结束，看下图</h4><p><img src="/images/NLP/HMM/2.png" alt="">  </p><h4 id="OK，那我们先来看一个例子"><a href="#OK，那我们先来看一个例子" class="headerlink" title="OK，那我们先来看一个例子"></a>OK，那我们先来看一个例子</h4><blockquote><p>Jane will spot Will  </p></blockquote><h4 id="我们根据前序经验统计出前面的两个概率，然后可以构造流程图如下"><a href="#我们根据前序经验统计出前面的两个概率，然后可以构造流程图如下" class="headerlink" title="我们根据前序经验统计出前面的两个概率，然后可以构造流程图如下"></a>我们根据前序经验统计出前面的两个概率，然后可以构造流程图如下</h4><p><img src="/images/NLP/HMM/3.png" alt="">   </p><h4 id="我们要计算每一条链的可能性就是把边数值与节点数值一路相乘，为了减少计算，我们采用每一层的动态规划（就是最简单那种），每个节点只保留前序节点数值最大的那一条。"><a href="#我们要计算每一条链的可能性就是把边数值与节点数值一路相乘，为了减少计算，我们采用每一层的动态规划（就是最简单那种），每个节点只保留前序节点数值最大的那一条。" class="headerlink" title="我们要计算每一条链的可能性就是把边数值与节点数值一路相乘，为了减少计算，我们采用每一层的动态规划（就是最简单那种），每个节点只保留前序节点数值最大的那一条。"></a>我们要计算每一条链的可能性就是把边数值与节点数值一路相乘，为了减少计算，我们采用每一层的动态规划（就是最简单那种），每个节点只保留前序节点数值最大的那一条。</h4><h4 id="最后我们就可以得到这样一条-通过分析我们可以发现确实得到的结果和我们预期相同"><a href="#最后我们就可以得到这样一条-通过分析我们可以发现确实得到的结果和我们预期相同" class="headerlink" title="最后我们就可以得到这样一条,通过分析我们可以发现确实得到的结果和我们预期相同"></a>最后我们就可以得到这样一条,通过分析我们可以发现确实得到的结果和我们预期相同</h4><h2 id=""><a href="#" class="headerlink" title="   "></a><img src="/images/NLP/HMM/3.png" alt="">   </h2><h3 id="以上是找best-path，接下来我们看一下HMM的forward-algorithm"><a href="#以上是找best-path，接下来我们看一下HMM的forward-algorithm" class="headerlink" title="以上是找best path，接下来我们看一下HMM的forward algorithm"></a>以上是找best path，接下来我们看一下HMM的forward algorithm</h3><hr><p>已知概率分布  </p><p><strong>1. Initial</strong></p><table><thead><tr><th>Sunny</th><th>Rainy</th></tr></thead><tbody><tr><td>0.5</td><td>0.5</td></tr></tbody></table><p><strong>2. Emission Probabilities</strong></p><table><thead><tr><th>null</th><th>yes</th><th>no</th></tr></thead><tbody><tr><td>sunny</td><td>0.1</td><td>0.9</td></tr><tr><td>rainy</td><td>0.8</td><td>0.2</td></tr></tbody></table><p><strong>3. State transition probabilities</strong></p><table><thead><tr><th>null</th><th>sunny</th><th>rainy</th></tr></thead><tbody><tr><td>sunny</td><td>0.8</td><td>0.2</td></tr><tr><td>rainy</td><td>0.4</td><td>0.6  </td></tr></tbody></table><h5 id="现在给定一个序列-S-‘yes’-‘no’-‘yes’"><a href="#现在给定一个序列-S-‘yes’-‘no’-‘yes’" class="headerlink" title="现在给定一个序列 S = [‘yes’, ‘no’, ‘yes’]"></a>现在给定一个序列 S = [‘yes’, ‘no’, ‘yes’]</h5><h5 id="通过forward-algorithm可以计算出在所有的天气组合当中所有满足该序列的概率"><a href="#通过forward-algorithm可以计算出在所有的天气组合当中所有满足该序列的概率" class="headerlink" title="通过forward algorithm可以计算出在所有的天气组合当中所有满足该序列的概率\"></a>通过forward algorithm可以计算出在所有的天气组合当中所有满足该序列的概率\</h5><p>$$<br>P(S|1-sunny) = 0.5 * 0.1 = 0.05<br>$$</p><p>$$<br>P(S|1-rainy) = 0.5 * 0.8 = 0.4<br>$$</p><p>$$<br>P(S|2-sunny) = (P(S|1-sunny)*0.8 + P(S|1-rainy)*0.4)P(no|sunny)<br>$$</p><h4 id="以此类推，最终结果为-P-S-3-sunny-P-S-3-rainy"><a href="#以此类推，最终结果为-P-S-3-sunny-P-S-3-rainy" class="headerlink" title="以此类推，最终结果为\(P(S|3-sunny) + P(S|3-rainy)\)"></a>以此类推，最终结果为\(P(S|3-sunny) + P(S|3-rainy)\)</h4><h4 id="我们可以看出来这个过程相当繁琐-这里用pomegranate库来实现"><a href="#我们可以看出来这个过程相当繁琐-这里用pomegranate库来实现" class="headerlink" title="我们可以看出来这个过程相当繁琐, 这里用pomegranate库来实现"></a>我们可以看出来这个过程相当繁琐, 这里用pomegranate库来实现</h4><blockquote><p>参考的问题是关于一个海藻的理论推导 <a href="https://blog.csdn.net/TH_NUM/article/details/51570174" target="_blank" rel="noopener">https://blog.csdn.net/TH_NUM/article/details/51570174</a></p></blockquote><h4 id="为什么和手动算的结果有些偏差呢，因为这个每一步都会进行估算"><a href="#为什么和手动算的结果有些偏差呢，因为这个每一步都会进行估算" class="headerlink" title="为什么和手动算的结果有些偏差呢，因为这个每一步都会进行估算"></a>为什么和手动算的结果有些偏差呢，因为这个每一步都会进行估算</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from pomegranate import State, HiddenMarkovModel, <span class="keyword">DiscreteDistribution</span></span><br><span class="line"><span class="keyword">import </span>numpy as np</span><br><span class="line">model = HiddenMarkovModel(name=<span class="string">"Example Model"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置每个状态的发射概率</span></span><br><span class="line">sunny_emissions = <span class="keyword">DiscreteDistribution(&#123;"Dry": </span><span class="number">0</span>.<span class="number">6</span>, <span class="string">"Dryish"</span>: <span class="number">0</span>.<span class="number">2</span>, <span class="string">"Damp"</span>:<span class="number">0</span>.<span class="number">15</span>, <span class="string">"Soggy"</span>:<span class="number">0</span>.<span class="number">05</span>&#125;)</span><br><span class="line">sunny_state = State(sunny_emissions, name=<span class="string">"Sunny"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">cloud_emissions </span>= <span class="keyword">DiscreteDistribution(&#123;"Dry": </span><span class="number">0</span>.<span class="number">25</span>, <span class="string">"Dryish"</span>: <span class="number">0</span>.<span class="number">25</span>, <span class="string">"Damp"</span>:<span class="number">0</span>.<span class="number">25</span>, <span class="string">"Soggy"</span>:<span class="number">0</span>.<span class="number">25</span>&#125;)</span><br><span class="line"><span class="keyword">cloud_state </span>= State(<span class="keyword">cloud_emissions, </span>name=<span class="string">"Cloud"</span>)</span><br><span class="line"></span><br><span class="line">rainy_emissions = <span class="keyword">DiscreteDistribution(&#123;"Dry": </span><span class="number">0</span>.<span class="number">05</span>, <span class="string">"Dryish"</span>: <span class="number">0</span>.<span class="number">10</span>, <span class="string">"Damp"</span>:<span class="number">0</span>.<span class="number">35</span>, <span class="string">"Soggy"</span>:<span class="number">0</span>.<span class="number">50</span>&#125;)</span><br><span class="line">rainy_state = State(rainy_emissions, name=<span class="string">"Rainy"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="keyword">cloud_emissions.probability("Dryish"))</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>添加状态</span><br><span class="line">model.<span class="keyword">add_states(sunny_state, </span><span class="keyword">cloud_state, </span>rainy_state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加转移概率，从init开始</span></span><br><span class="line">model.<span class="keyword">add_transition(model.start, </span>sunny_state, <span class="number">0</span>.<span class="number">63</span>)</span><br><span class="line">model.<span class="keyword">add_transition(model.start, </span>rainy_state, <span class="number">0</span>.<span class="number">20</span>)</span><br><span class="line">model.<span class="keyword">add_transition(model.start, </span><span class="keyword">cloud_state, </span><span class="number">0</span>.<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.<span class="keyword">add_transition(sunny_state, </span>sunny_state, <span class="number">0</span>.<span class="number">5</span>)  <span class="comment"># 50% sunny-&gt;sunny</span></span><br><span class="line">model.<span class="keyword">add_transition(sunny_state, </span>rainy_state, <span class="number">0</span>.<span class="number">125</span>)  <span class="comment"># 12.5% sunny-&gt;rainy</span></span><br><span class="line">model.<span class="keyword">add_transition(sunny_state, </span><span class="keyword">cloud_state, </span><span class="number">0</span>.<span class="number">375</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.<span class="keyword">add_transition(rainy_state, </span>sunny_state, <span class="number">0</span>.<span class="number">25</span>)  <span class="comment"># 25% rainy-&gt;sunny</span></span><br><span class="line">model.<span class="keyword">add_transition(rainy_state, </span>rainy_state, <span class="number">0</span>.<span class="number">375</span>)  <span class="comment"># 37.5% rainy-&gt;rainy</span></span><br><span class="line">model.<span class="keyword">add_transition(rainy_state, </span><span class="keyword">cloud_state, </span><span class="number">0</span>.<span class="number">375</span>)</span><br><span class="line"></span><br><span class="line">model.<span class="keyword">add_transition(cloud_state, </span><span class="keyword">cloud_state, </span><span class="number">0</span>.<span class="number">125</span>)</span><br><span class="line">model.<span class="keyword">add_transition(cloud_state, </span>sunny_state, <span class="number">0</span>.<span class="number">25</span>)</span><br><span class="line">model.<span class="keyword">add_transition(cloud_state, </span>rainy_state, <span class="number">0</span>.<span class="number">625</span>)</span><br><span class="line"><span class="comment"># 最后使用bake完结</span></span><br><span class="line">model.<span class="keyword">bake()</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">observations </span>= [<span class="string">'Dry'</span>, <span class="string">'Damp'</span>, <span class="string">'Soggy'</span>]</span><br><span class="line">forward_matrix = np.exp(model.forward(observations))</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> use model.log_probability() to calculate the all-paths likelihood of the</span></span><br><span class="line"><span class="comment"># observed sequence and then use np.exp() to convert log-likelihood to likelihood</span></span><br><span class="line">probability_percentage = np.exp(model.log_probability(observations))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display the forward probabilities</span></span><br><span class="line">print(<span class="string">"         "</span> + <span class="string">""</span>.<span class="keyword">join(s.name.center(len(s.name)+6) </span>for s in model.states))</span><br><span class="line">for i in range(len(observations) + <span class="number">1</span>):</span><br><span class="line">    print(<span class="string">" &lt;start&gt; "</span> if i==<span class="number">0</span> else observations[i - <span class="number">1</span>].center(<span class="number">9</span>), end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>.<span class="keyword">join("&#123;:.0f&#125;%".format(100 </span>* forward_matrix[i, <span class="keyword">j]).center(len(s.name) </span>+ <span class="number">6</span>)</span><br><span class="line">                  for <span class="keyword">j, </span>s in enumerate(model.states)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nThe likelihood over all possible paths "</span> + \</span><br><span class="line">      <span class="string">"of this model producing the sequence &#123;&#125; is &#123;:.2f&#125;%\n\n"</span></span><br><span class="line">      .format(observations, <span class="number">100</span> * probability_percentage))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;&lt;/script&gt;  

&lt;h3 id=&quot;隐马尔可夫模型在词性标注
      
    
    </summary>
    
      <category term="NLP" scheme="http://yoursite.com/categories/NLP/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Basic modules of NLP python</title>
    <link href="http://yoursite.com/2018/11/18/python_models/"/>
    <id>http://yoursite.com/2018/11/18/python_models/</id>
    <published>2018-11-18T14:13:36.000Z</published>
    <updated>2018-11-18T14:13:36.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>指定二维数组, 可以调用a.keys()来查看索引  </li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = defaultdict(list)</span><br></pre></td></tr></table></figure><ol start="2"><li>Cunter 可以统计一个list中各个部件出现的数量，可以搭配上面的defaultlist使用  </li></ol><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;指定二维数组, 可以调用a.keys()来查看索引  &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>spam classification --- naive bayes</title>
    <link href="http://yoursite.com/2018/11/16/spam-classification/"/>
    <id>http://yoursite.com/2018/11/16/spam-classification/</id>
    <published>2018-11-17T05:57:40.000Z</published>
    <updated>2018-11-17T05:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script> <h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><h5 id="我们在清分的时候认为有easy和money就可能使垃圾邮件，通过检查邮件中有两个单词就可以说明是否为spam，“朴素”贝叶斯朴素在于认为各个元素是相互独立的，因此直接将概率相乘"><a href="#我们在清分的时候认为有easy和money就可能使垃圾邮件，通过检查邮件中有两个单词就可以说明是否为spam，“朴素”贝叶斯朴素在于认为各个元素是相互独立的，因此直接将概率相乘" class="headerlink" title="我们在清分的时候认为有easy和money就可能使垃圾邮件，通过检查邮件中有两个单词就可以说明是否为spam，“朴素”贝叶斯朴素在于认为各个元素是相互独立的，因此直接将概率相乘"></a>我们在清分的时候认为有easy和money就可能使垃圾邮件，通过检查邮件中有两个单词就可以说明是否为spam，“朴素”贝叶斯朴素在于认为各个元素是相互独立的，因此直接将概率相乘</h5><p>$$<br>(1) P(spam) P(‘easy’|spam) P(‘money’|spam)  +  P(ham) P(‘easy’|ham) P(‘money’|ham) = \alpha<br>$$</p><p>$$<br>(2) P(spam|’easy’, ‘money’) = \frac{ P(spam) P(‘easy’|spam) P(‘money’|spam) }{\alpha}<br>$$    </p><p>$$<br>(3) P(ham|’easy’, ‘money’) = \frac{ P(ham) P(‘easy’|ham) P(‘money’|ham) }{\alpha}<br>$$</p><p>$$<br> Final : P(spam|’easy’, ‘money’)  +  P(ham|’easy’, ‘money’) = 1<br>$$</p><h5 id="当然我们在实际过程中调用sklearn-naive-bayes-MultinomialNB就可以"><a href="#当然我们在实际过程中调用sklearn-naive-bayes-MultinomialNB就可以" class="headerlink" title="当然我们在实际过程中调用sklearn.naive_bayes.MultinomialNB就可以"></a>当然我们在实际过程中调用sklearn.naive_bayes.MultinomialNB就可以</h5><h5 id="gt-注意训练数据的形式是dataframe，用pandas直接读取或者是用matrix转换"><a href="#gt-注意训练数据的形式是dataframe，用pandas直接读取或者是用matrix转换" class="headerlink" title="&gt; 注意训练数据的形式是dataframe，用pandas直接读取或者是用matrix转换"></a>&gt; 注意训练数据的形式是dataframe，用pandas直接读取或者是用matrix转换</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># Dataset from - https://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line">df = pd.read_table(</span><br><span class="line">        <span class="string">'./smsspamcollection/SMSSpamCollection'</span>,</span><br><span class="line">        sep=<span class="string">'\t'</span>,</span><br><span class="line">       names = [<span class="string">'label'</span>, <span class="string">'sms_message'</span>]</span><br><span class="line">        )</span><br><span class="line"><span class="comment"># Note1. 注意读出的是data_frame，命名用names</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'label'</span>] = df.label.map(&#123;<span class="string">'spam'</span>:<span class="number">1</span>, <span class="string">'ham'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note2. 二分类问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(df[<span class="string">'sms_message'</span>],</span><br><span class="line">                                                    df[<span class="string">'label'</span>],</span><br><span class="line">                                                    random_state=<span class="number">1</span>)</span><br><span class="line">count_vector = CountVectorizer()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">fit是找到规律，如果fit过之后就可以直接transform，因为规律已经学会了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">training_data = count_vector.fit_transform(X_train)</span><br><span class="line">testing_data = count_vector.transform(X_test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line">naive_bayes = MultinomialNB()</span><br><span class="line">naive_bayes.fit(training_data, y_train)</span><br><span class="line">predictions = naive_bayes.predict(testing_data)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Precision tells us what proportion of messages we classified as spam, actually were spam.</span></span><br><span class="line"><span class="string">[True Positives/(True Positives + False Positives)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Recall tells us what proportion of messages we classified as spam in the total number of spam</span></span><br><span class="line"><span class="string">[True Positives/(True Positives + False Negatives)]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, precision_score, recall_score, f1_score</span><br><span class="line">print(<span class="string">'Accuracy score: '</span>, format(accuracy_score(y_test, predictions)))</span><br><span class="line">print(<span class="string">'Precision score: '</span>, format(precision_score(y_test, predictions)))</span><br><span class="line">print(<span class="string">'Recall score: '</span>, format(recall_score(y_test, predictions)))</span><br><span class="line">print(<span class="string">'F1 score: '</span>, format(f1_score(y_test, predictions)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;&lt;/script&gt; 

&lt;h3 id=&quot;举个栗子&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>NLP(First) Text Processing</title>
    <link href="http://yoursite.com/2018/11/14/NLP1/"/>
    <id>http://yoursite.com/2018/11/14/NLP1/</id>
    <published>2018-11-14T14:26:22.000Z</published>
    <updated>2018-11-14T14:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="basic-rules-of-text-procession-and-how-to-use-nltk"><a href="#basic-rules-of-text-procession-and-how-to-use-nltk" class="headerlink" title="basic rules of text procession and how to use nltk"></a>basic rules of text procession and how to use nltk</h2><h3 id="下图是一个简单的处理流程"><a href="#下图是一个简单的处理流程" class="headerlink" title="下图是一个简单的处理流程"></a>下图是一个简单的处理流程</h3><p><img src="/images/NLP/text_processing/text_p.png" alt=""></p><p>判断一段文字中单词出现的数量是一个经典的问题，首先建立一个dict。接着把str用spilt给分开，用正则表达式去除标点，然后统计数量</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def count_words(str):</span><br><span class="line">    <span class="string">""</span><span class="string">"Count how many times each unique word occurs in text."</span><span class="string">""</span></span><br><span class="line">    counts = dict()  <span class="comment"># dictionary of &#123; &lt;word&gt;: &lt;count&gt; &#125; pairs to return</span></span><br><span class="line">    <span class="comment"># text = str(text)</span></span><br><span class="line">    <span class="comment"># str = "one and two and three and two and one\nbuffalo buffalo buffalo, buffalo buffalo!"</span></span><br><span class="line">    str = str.<span class="built_in">replace</span>(<span class="string">"\n"</span>, <span class="string">" "</span>)</span><br><span class="line">    str = str.<span class="built_in">lower</span>()</span><br><span class="line">    word_l = str.<span class="built_in">split</span>(<span class="string">" "</span>)</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Split text into tokens (words), leaving out punctuation</span></span><br><span class="line">    <span class="comment"># (Hint: Use regex to split on non-alphanumeric characters)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Aggregate word counts using a dictionary</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">word</span> <span class="keyword">in</span> word_l:</span><br><span class="line">        <span class="built_in">word</span> = re.match(<span class="string">"([a-zA-Z]+).*"</span>, <span class="built_in">word</span>)</span><br><span class="line">        <span class="built_in">word</span> = <span class="built_in">word</span>.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">word</span> <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">            counts[<span class="built_in">word</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            counts[<span class="built_in">word</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="literal">return</span> counts</span><br></pre></td></tr></table></figure><p>看起来不错，但是如果有一套统一的工具来做这些是不是会更好，这时候就出现了nltk(Natural Language ToolKit)  </p><blockquote><p>pip install nltk  </p></blockquote><p><strong>1. from nltk.tokenize import word_tokenize</strong></p><blockquote><p>将一个句子中的单词一个个提取出来，相比于自己split好在他更智能。e.g. 可以提取出Dr.</p></blockquote><p><strong>2. from nltk.tokenize import sent_tokenize</strong> </p><blockquote><p>可以将一个个句子提取出来  </p></blockquote><p><strong>3. from nltk.corpus import stopwords</strong>  </p><blockquote><p>有一些句子中的单词是没有意义的，stopwords可以帮助我们快速提取出来  </p></blockquote><p><strong>4. Sentence Parsing</strong></p><blockquote><p>根据语法规则把一句话变成一棵树，没搞懂啥意思</p></blockquote><p><img src="/images/NLP/text_processing/parse_tree.png" alt=""></p><p><strong>5. Stemming &amp; Lemmatization</strong></p><blockquote><p>同一个单词可能有不同时态、单复数等，取其枝干可以大大减小运算量和内存占用  </p></blockquote><p>另外我们需要了解的还有beautiful的相应用法，imooc的爬虫课程讲解了基础。</p><p>正则表达式也是很重要的知识，在这里就不一一阐述</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;basic-rules-of-text-procession-and-how-to-use-nltk&quot;&gt;&lt;a href=&quot;#basic-rules-of-text-procession-and-how-to-use-nltk&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="NLP" scheme="http://yoursite.com/categories/NLP/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Pyspider (Four) how to use a simple Spider</title>
    <link href="http://yoursite.com/2018/11/11/pyspider4/"/>
    <id>http://yoursite.com/2018/11/11/pyspider4/</id>
    <published>2018-11-11T17:15:50.000Z</published>
    <updated>2018-11-11T17:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建环境"><a href="#一、创建环境" class="headerlink" title="一、创建环境"></a>一、创建环境</h3><p>使用pycharm安装spyder<br>打开想要创建的目录</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scrapy </span>startproject ArticleSpyder <span class="comment">#创建工程</span></span><br><span class="line"><span class="keyword">scrapy </span>genspider <span class="keyword">jobbole </span><span class="keyword">blog.jobbole.com </span><span class="comment">#创建模板</span></span><br></pre></td></tr></table></figure><p>这时候我们就会发现用pycharm打开这个文件~<br>在setting.py中将obey robots.txt 设置为false防止去多url被过滤<br>在ArticleSpider下创立main.py  </p><blockquote></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from scrapy<span class="selector-class">.cmdline</span> import execute</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">path = os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.abspath</span>(__file__))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(path)</span></span></span><br><span class="line">sys<span class="selector-class">.path</span><span class="selector-class">.append</span>(path)</span><br><span class="line"><span class="function"><span class="title">execute</span><span class="params">([<span class="string">"scrapy"</span>,<span class="string">"crawl"</span>, <span class="string">"jobblole"</span>])</span></span></span><br></pre></td></tr></table></figure><h3 id="二、在cmd中进行实验"><a href="#二、在cmd中进行实验" class="headerlink" title="二、在cmd中进行实验"></a>二、在cmd中进行实验</h3><p>好处是不用反复run对网页内容进行拉取  </p><blockquote></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http:<span class="regexp">//</span>blog.jobbole.com<span class="regexp">/114461/</span></span><br></pre></td></tr></table></figure><h3 id="三、使用xpath"><a href="#三、使用xpath" class="headerlink" title="三、使用xpath"></a>三、使用xpath</h3><p>这里可以一次拉取我们需要的信息，接着我们选取拉回的response进行操作<br>这里我们选取一篇可怜的博客作为实验对象，分别拉取他的title、create_date、praise_nums</p><blockquote><p>实验对象 <a href="http://blog.jobbole.com/114461/" target="_blank" rel="noopener">http://blog.jobbole.com/114461/</a>   </p></blockquote><p>这里我们分别采用绝对路径、选取全部class名字、选取部分class名字进行操作。<strong>extract()帮助我们提取出里面的有效信息</strong>，操作时候注意我们需要的文本是在 <strong>当前class下还是h10等小标签下</strong> </p><p>注意：在python project中在def parse(self, response)下进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#这里是用绝对路径并extract出里面的文本信息  </span></span><br><span class="line">title = response.xpath(<span class="string">"/html/head/title/text()"</span>) </span><br><span class="line">title.extract() </span><br><span class="line"></span><br><span class="line"><span class="comment"># //p: 所有的p标签 、[@class=xxx]:class 名字为xxx</span></span><br><span class="line"><span class="comment"># strip():去掉空格和换行</span></span><br><span class="line">create_date = response.xpath(<span class="string">"//p[@class='entry-meta-hide-on-mobile']/text()"</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">create_date = create_date.replace(<span class="string">"`"</span>,<span class="string">""</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#用了contains函数：注意要加[]以及'，'分割两个参数</span></span><br><span class="line">praise_nums = response.xpath(<span class="string">"//span[contains(@class,'vote-post-up')]/h10/text()"</span>).extract()</span><br><span class="line"></span><br><span class="line"> favor = response.xpath(<span class="string">"//span[contains(@class,'bookmark-btn')]/text()"</span>).extract()</span><br></pre></td></tr></table></figure><p>全部操作完成后可以用正则表达式进行清洗  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">favor = response.xpath(<span class="string">"//span[contains(@class,'bookmark-btn')]/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        match_f = re.match(<span class="string">".*(\d+).*"</span>,favor)</span><br><span class="line">        print(<span class="string">"sdfg"</span>)</span><br><span class="line">        <span class="keyword">if</span> match_f:</span><br><span class="line">            print(match_f.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># given a tag_list 我们要去除掉不是tag的评论</span></span><br><span class="line">[element <span class="keyword">for</span> element <span class="keyword">in</span> tag_list <span class="keyword">if</span> <span class="keyword">not</span> element.endswith(<span class="string">"评论"</span>)]  </span><br><span class="line">```</span><br></pre></td></tr></table></figure><hr><h3 id="四、使用css"><a href="#四、使用css" class="headerlink" title="四、使用css"></a>四、使用css</h3><p>*: 选择所有  </p><p>#container: 选择id为container的节点<br>.container: 选取所有class包含container的节点<br>li a: 选取所有li下的所有a节点<br>ul + p: 选择ul后面的第一个p元素<br>div#container &gt; ul: 选取id为container的div的第一个ul元素<br>ul ~ p : 选取和ul相邻的所有p元素<br>a[href=”<a href="http://jobbole.com&quot;]" target="_blank" rel="noopener">http://jobbole.com&quot;]</a>: 选出所有该gref的所有元素<br>a[href*=”jobblole”]: 选出所有该gref的所有元素<br>a[href^=”http”]: 选出所有该gref以http的所有元素<br>a[href$=”.jpg”]: 选出所有该gref以jpg结尾的所有元素</p><p>#id: id 写法</p><blockquote><p>爬取例子 <a href="http://blog.jobbole.com/107390/" target="_blank" rel="noopener">http://blog.jobbole.com/107390/</a></p></blockquote><ol><li>选取p元素下的entry-meta-hide-on-mobile类的text</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date = response.css(<span class="string">"p.entry-meta-hide-on-mobile::text"</span>).extract()[<span class="number">0</span>].strip()</span><br></pre></td></tr></table></figure><ol start="2"><li>取span下vote-post-up中和h10的文本（点赞数），第一个用’.’,后面的用空格，text用冒号。如果说后面的class唯一可以省去span  </li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vote</span> = response.css(<span class="string">"span.vote-post-up h10::text"</span>).extract()[<span class="number">0</span>].strip()</span><br></pre></td></tr></table></figure><ol start="3"><li>取herf=”#article-comment”下的span中的文字  </li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment</span> = response.css(<span class="string">"a[href='#article-comment'] span::text"</span>).extract()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ol start="4"><li><p>提取内容  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">content</span> = response.css(<span class="string">".entry"</span>)</span><br></pre></td></tr></table></figure></li><li><p>提取tag并用’,’连接  </p></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags</span> = response.css(<span class="string">"div.entry-meta p a::text"</span>).extract()</span><br><span class="line"><span class="attr">t</span> = <span class="string">","</span>.join(tags)</span><br></pre></td></tr></table></figure><ol start="6"><li>提取一个页面中的所有url</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_urls</span> = response.css(<span class="string">"#archive .floated-thumb .post-thumb a::attr(href)"</span>).extract()</span><br></pre></td></tr></table></figure><ol start="7"><li>选取下一页  <blockquote><p>注意attr的提取功能  </p></blockquote></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">next_p</span> = response.css(<span class="string">".next.page-numbers::attr(href)"</span>).extract_first(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="五、实战"><a href="#五、实战" class="headerlink" title="五、实战"></a>五、实战</h3><h5 id="这里记录下来debug了两个小时的坑"><a href="#这里记录下来debug了两个小时的坑" class="headerlink" title="这里记录下来debug了两个小时的坑"></a>这里记录下来debug了两个小时的坑</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span> = <span class="string">"jobblole"</span></span><br><span class="line">   <span class="attr">allowed_domains</span> = [<span class="string">"web.jobbole.com"</span>]</span><br><span class="line">   <span class="attr">start_urls</span> = ['http://web.jobbole.com/all-posts/']</span><br></pre></td></tr></table></figure><h5 id="一直没注意domain，我们应该确保搜索的范围在domain中，不然会出现错误"><a href="#一直没注意domain，我们应该确保搜索的范围在domain中，不然会出现错误" class="headerlink" title="一直没注意domain，我们应该确保搜索的范围在domain中，不然会出现错误"></a>一直没注意domain，我们应该确保搜索的范围在domain中，不然会出现错误</h5><p>接着打开一中创建的模板  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归运行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        1. 获取文章列表页中的文章url并交给scrapy下载后并进行解析</span></span><br><span class="line"><span class="string">        2. 获取下一页的url并交给scrapy进行下载， 下载完成后交给parse</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 解析列表页中的所有文章url并交给scrapy下载后并进行解析</span></span><br><span class="line"></span><br><span class="line">        post_nodes = response.css(<span class="string">"#archive .floated-thumb .post-thumb a"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> post_node <span class="keyword">in</span> post_nodes:</span><br><span class="line">            post_url = post_node.css(<span class="string">"::attr(href)"</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">            print(post_url)</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, post_url), callback=self.parse_detail)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取下一页并交给scrapy进行下载</span></span><br><span class="line">        next_url = response.css(<span class="string">".next.page-numbers::attr(href)"</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">if</span> next_url:</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, post_url), callback=self.parse)</span><br></pre></td></tr></table></figure><p>这里有三个需要注意的地方  </p><ol><li>yield Request就是运行，无需其他操作</li><li>url要使用parse.urljoin(response.url, post_url), 比如github，能抓取到的只有仓库名，但是前面需要加上github的大域名  </li><li>callback不需要加括号，只需要函数名字  </li></ol><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def parse_detail(self, response):</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 通过css选择器提取字段</span></span><br><span class="line"></span><br><span class="line">       <span class="attr">title</span> = response.css(<span class="string">".entry-header h1::text"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">       <span class="attr">create_date</span> = response.css(<span class="string">"p.entry-meta-hide-on-mobile::text"</span>).extract()[<span class="number">0</span>].strip().replace(<span class="string">"·"</span>, <span class="string">""</span>).strip()</span><br><span class="line">       <span class="attr">praise_nums</span> = response.css(<span class="string">".vote-post-up h10::text"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">       <span class="attr">fav_nums</span> = response.css(<span class="string">".bookmark-btn::text"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">       <span class="attr">match_re</span> = re.match(<span class="string">".*?(\d+).*"</span>, fav_nums)</span><br><span class="line">       <span class="keyword">if</span> match_re:</span><br><span class="line">           <span class="attr">fav_nums</span> = int(match_re.group(<span class="number">1</span>))</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="attr">fav_nums</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>未完待续….等项目全部做完附赠项目地址  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建环境&quot;&gt;&lt;a href=&quot;#一、创建环境&quot; class=&quot;headerlink&quot; title=&quot;一、创建环境&quot;&gt;&lt;/a&gt;一、创建环境&lt;/h3&gt;&lt;p&gt;使用pycharm安装spyder&lt;br&gt;打开想要创建的目录&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pyspider (Third) Basic knowledge</title>
    <link href="http://yoursite.com/2018/11/10/pyspider3/"/>
    <id>http://yoursite.com/2018/11/10/pyspider3/</id>
    <published>2018-11-11T04:08:50.000Z</published>
    <updated>2018-11-11T04:08:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>URL网络实际是一个树形结构，因此分为广度优先和深度优先搜索。<br>真实网站是存在许多环路的，因此一个重要的方法就是去重。本文介绍去重和字符串编码问题  </p><h4 id="一、Depth-First-amp-Width-First"><a href="#一、Depth-First-amp-Width-First" class="headerlink" title="一、Depth-First &amp; Width-First"></a>一、Depth-First &amp; Width-First</h4><p>不做赘述。  </p><h4 id="二、爬虫去重序列"><a href="#二、爬虫去重序列" class="headerlink" title="二、爬虫去重序列"></a>二、爬虫去重序列</h4><ol><li>url经过md5等方法哈希后保存到set中  </li><li>用bitmap方法，将url hash到某一位（缺点：冲突不命中会比较高）  </li><li>用bloomfilter对bitmap进行优化 </li></ol><h3 id="三、Unicode-amp-utf8"><a href="#三、Unicode-amp-utf8" class="headerlink" title="三、Unicode &amp; utf8"></a>三、Unicode &amp; utf8</h3><p>Unicode将所有语言统一到一套编码，都用2byte表示。但是如果说一篇文章全是英文，储存空间和传输量会比Ascii多一倍<br>utf-8将英文又变回一个字节<br>将UTF-8文件读取成Unicode（方便统一操作），处理完后保存成UFT-8文件（节省空间）<br>python3现在用unicode统一进行表示  </p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"我爱python"</span></span><br><span class="line">s.encode(<span class="string">"utf8"</span>) <span class="comment"># 此时s必须是unicode，不然会报错</span></span><br></pre></td></tr></table></figure><p>前面介绍了基本背景(First)，正则表达式(Second)，和去重及编码，下章节开始讲解Scrapy框架</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;URL网络实际是一个树形结构，因此分为广度优先和深度优先搜索。&lt;br&gt;真实网站是存在许多环路的，因此一个重要的方法就是去重。本文介绍去重和字符串编码问题  &lt;/p&gt;
&lt;h4 id=&quot;一、Depth-First-amp-Width-First&quot;&gt;&lt;a href=&quot;#一、Dep
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pyspider (Second) regular expression</title>
    <link href="http://yoursite.com/2018/11/10/pyspider2/"/>
    <id>http://yoursite.com/2018/11/10/pyspider2/</id>
    <published>2018-11-11T04:06:18.000Z</published>
    <updated>2018-11-11T04:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、基本规则"><a href="#一、基本规则" class="headerlink" title="一、基本规则"></a>一、基本规则</h4><p> ^b: 强制以b开头<br> .: 可以匹配任意字符<br> *: 可以代表无限多个前一字符<br> 3$: 必须以3强制结尾<br> (): 返回括号内匹配的内容<br> ？: 非贪婪匹配，遇到该字符的第一个就停下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">line = <span class="string">"waaaaangww123"</span></span><br><span class="line"></span><br><span class="line">regex_str = <span class="string">".*?(w.*w).*"</span> <span class="comment"># waaaaangww</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">regex_str = ".*?(w.*?w).*" # waaaaangw</span></span><br><span class="line"><span class="string">regex_str = ".*(w.*w).*" # ww</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">match_str = re.match(regex_str, line)</span><br><span class="line"><span class="keyword">if</span> match_str:</span><br><span class="line">    print(match_str.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>+: 前面的字符至少出现一次(与<em>都是次数限定符)<br>{2}: 前面的出现2次  {2,}:前面的出现至少两次  {2，5}: 前面的出现至少两次至多5次<br>|：或, 模式1或者模式2 (优先提取竖线前的模式)<br>[abcd]:前面的字符是abcd中任意一个均可<br>[0-9]:区间任意一个字符<br>[^1]: 不为1<br>[.</em>]: 去除特殊字符的特殊含义</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"><span class="section"># 举个例子提取电话号码</span></span><br><span class="line">phone_num = "17673168577"</span><br><span class="line">regex_str = "(1[<span class="string">5678</span>][<span class="symbol">0-9</span>]&#123;9&#125;)" # "(1[<span class="string">5678</span>][<span class="symbol">^1</span>]&#123;9&#125;)"</span><br><span class="line"><span class="section"># 17673168577</span></span><br><span class="line"><span class="section"># 以1开头，后面跟5or6or7or8, 再跟9个任意数字</span></span><br><span class="line">match<span class="emphasis">_str = re.match(regex_</span>str, phone_num)</span><br><span class="line">if match_str:</span><br><span class="line"><span class="code">    print(match_str.group(1))</span></span><br></pre></td></tr></table></figure><p>\s: 空格(小写)<br>\S: 单一字符且只要不为空格都可以(大写)<br>\w: 与[A-Za-z0-9_]相同<br>\W: 与上面的相反<br>[\u4E00–u9FA5]: 任意汉字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、基本规则&quot;&gt;&lt;a href=&quot;#一、基本规则&quot; class=&quot;headerlink&quot; title=&quot;一、基本规则&quot;&gt;&lt;/a&gt;一、基本规则&lt;/h4&gt;&lt;p&gt; ^b: 强制以b开头&lt;br&gt; .: 可以匹配任意字符&lt;br&gt; *: 可以代表无限多个前一字符&lt;br&gt; 3$
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Introduction of Pyspider(First)</title>
    <link href="http://yoursite.com/2018/11/09/pyspider1/"/>
    <id>http://yoursite.com/2018/11/09/pyspider1/</id>
    <published>2018-11-09T06:12:50.000Z</published>
    <updated>2018-11-09T06:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、mysql-fo-navicat连接权限问题"><a href="#一、mysql-fo-navicat连接权限问题" class="headerlink" title="一、mysql fo navicat连接权限问题"></a>一、mysql fo navicat连接权限问题</h4><ol><li>在windows上下载navicat</li><li>在linux上配置mysql并在win下用navicat进行连接  </li></ol><blockquote><p>mysql配置文件修改  </p></blockquote><p>外部访问：/etc/mysql/mysql.conf.d/mysqld.cnf<br>编辑文件：bind-address=0.0.0.0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'root'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;     <span class="comment">#刷新权限</span></span><br></pre></td></tr></table></figure><h4 id="二、用什么技术"><a href="#二、用什么技术" class="headerlink" title="二、用什么技术"></a>二、用什么技术</h4><p>requests和beautifulsoup都是库，而scrapy是框架。因此本教程运用scrapy  </p><blockquote><p>Scrapy内置的css和xpath selector方便  </p></blockquote><h4 id="三、网页分类"><a href="#三、网页分类" class="headerlink" title="三、网页分类"></a>三、网页分类</h4><ol><li>静态网页（例如hexo）  </li><li>动态网页（例如淘宝）  </li><li>webservice  </li></ol><h4 id="四、能做什么"><a href="#四、能做什么" class="headerlink" title="四、能做什么"></a>四、能做什么</h4><ol><li>搜索引擎—Baidu  </li><li>推荐引擎—今日头条  </li><li>机器学习的数据样本  </li><li>数据分析  </li><li>….</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、mysql-fo-navicat连接权限问题&quot;&gt;&lt;a href=&quot;#一、mysql-fo-navicat连接权限问题&quot; class=&quot;headerlink&quot; title=&quot;一、mysql fo navicat连接权限问题&quot;&gt;&lt;/a&gt;一、mysql fo nav
      
    
    </summary>
    
    
  </entry>
  
</feed>
