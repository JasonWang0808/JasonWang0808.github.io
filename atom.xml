<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junyu Wang&#39;s Blog</title>
  
  <subtitle>hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-30T02:30:46.858Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JunYu Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recursion---leetcode</title>
    <link href="http://yoursite.com/2018/10/30/Recursion/"/>
    <id>http://yoursite.com/2018/10/30/Recursion/</id>
    <published>2018-10-30T02:28:18.149Z</published>
    <updated>2018-10-30T02:30:46.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>From my perspective, Recursion is an efficient way because it makes us to <strong>only look at the current step</strong>. However, its <strong>complexity is very high.</strong></p><hr><h4 id="Example1-10-Regular-Expression-Matching-from-Leetcode"><a href="#Example1-10-Regular-Expression-Matching-from-Leetcode" class="headerlink" title="Example1. 10. Regular Expression Matching from Leetcode"></a>Example1. <a href="https://leetcode.com/problems/regular-expression-matching/solution/" target="_blank" rel="noopener">10. Regular Expression Matching</a> from Leetcode</h4><blockquote><p>You can see the description on the above link.  </p></blockquote><p>My problem is that it contains tooooo many different combination of <strong>“character”, “.” and “*“</strong>. It looks like a time array, which you should look at <strong>the moment</strong>. <strong>time before</strong> and the <strong>future</strong>, which is very bothering.   </p><blockquote><p>So what we do here is only determine the current action, and let the function to judge what to do next itself.  </p></blockquote><p>So, given two arries, we have several choices  </p><ol><li>whether reach the end?<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p and s reach the end at the same time</span></span><br><span class="line"><span class="comment"># p reach the end, but s doesn't</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(s, p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p.empty())&#123;</span><br><span class="line"><span class="keyword">if</span>(s == empty()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">2. if the first character match?</span></span><br></pre></td></tr></table></figure></li></ol><p>def isMatch(s, p){<br>    bool first_match;<br>    if(s[0] == p[0] || p[0] == ‘.’) first_match = true;</p><p>}<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> <span class="keyword">is</span> <span class="keyword">it</span> followed <span class="keyword">by</span> * ?</span><br></pre></td></tr></table></figure></p><p>def isMatch(s, p){<br>    if(p.length() &gt;= 2 || p[1] == ‘<em>‘): # the second character of p is </em></p><pre><code># this if means: * is 0 or not    return isMatch(s, p.substr(2)) || (first_match &amp;&amp; isMatch(s.substr(1), p)else:    return first_match &amp;&amp; isMatch(s.substr(1), p.substr(1))</code></pre><p>}<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The complete <span class="selector-tag">code</span> <span class="keyword">in</span> C++</span><br></pre></td></tr></table></figure></p><p>#include <iostream><br>using namespace std;<br>class Solution {<br>public:<br>    bool isMatch(string s, string p) {<br>        bool first = false;<br>        if(p.empty()){<br>            return (s.empty());<br>        }<br>        else{<br>            first = (!s.empty() &amp;&amp; (s[0] == p[0] || p[0] == ‘.’));<br>        }<br>        if(p.length()&gt;= 2 &amp;&amp; p[1] == ‘<em>‘){<br>            return (isMatch(s, p.substr(2)) || (first &amp;&amp; isMatch(s.substr(1), p) ) ); // make </em> be 0  || make * be at least 1<br>        }<br>        else return first &amp;&amp; isMatch(s.substr(1), p.substr(1));<br>    }<br>};<br>int main() {<br>    Solution solution;</iostream></p><pre><code>return 0;</code></pre><p>}<br><code>`</code><br>We can see that the compexity is high. Because there are many duplicated calculations. SO we can set an array to solve this problem, this is same with <strong>DYNAMIC PROGRAMMING</strong>, which we will dicuss in there.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Recursion&quot;&gt;&lt;a href=&quot;#Recursion&quot; class=&quot;headerlink&quot; title=&quot;Recursion&quot;&gt;&lt;/a&gt;Recursion&lt;/h2&gt;&lt;p&gt;From my perspective, Recursion is an effic
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dynamic Programming---Leetcode</title>
    <link href="http://yoursite.com/2018/10/30/DP/"/>
    <id>http://yoursite.com/2018/10/30/DP/</id>
    <published>2018-10-30T02:28:18.140Z</published>
    <updated>2018-10-30T02:30:26.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h3><p>The situations are that our current situations depend on the old calculations. So we don’t need to start from the begining again, <strong>we can store the outcome of each step so we can cite it directly.</strong></p><p>Usually, the parameters of the function are the index instead of the object (string etc.) itself. Because our operations are on the matrix.</p><hr><h5 id="Example1-5-Longest-Palindromic-Substring-from-Leetcode"><a href="#Example1-5-Longest-Palindromic-Substring-from-Leetcode" class="headerlink" title="Example1. 5. Longest Palindromic Substring from Leetcode"></a>Example1. <a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="noopener">5. Longest Palindromic Substring</a> from Leetcode</h5><p>We calculation according to the length of the string. If we wanna judge ‘cbbaac’, we can find whether ‘bbaa’ is Palindromic, then find the character from the two ends are same.</p><hr><h5 id="Example2-10-Regular-Expression-Matching-from-the-Leetcode"><a href="#Example2-10-Regular-Expression-Matching-from-the-Leetcode" class="headerlink" title="Example2. 10. Regular Expression Matching from the Leetcode"></a>Example2. <a href="https://leetcode.com/problems/regular-expression-matching/description/" target="_blank" rel="noopener">10. Regular Expression Matching</a> from the Leetcode</h5><p>Just like we talk in  “Recursion”, DP algorithm sometimes help Recursion to decrease the calculation. Such as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(i, j, arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arr[i][j] != null: <span class="comment">## it can returns directly</span></span><br><span class="line">        <span class="keyword">return</span> arr[i][j] </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        calculate the arr[i][j]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dynamic-Programming&quot;&gt;&lt;a href=&quot;#Dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Programming&quot;&gt;&lt;/a&gt;Dynamic Programming&lt;/h3&gt;&lt;p&gt;Th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to apply hexo to Github Page (一)</title>
    <link href="http://yoursite.com/2018/10/20/hexo/"/>
    <id>http://yoursite.com/2018/10/20/hexo/</id>
    <published>2018-10-20T11:56:02.000Z</published>
    <updated>2018-10-20T12:24:39.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="How-to-build-up-your-hexo-on-Github-Page"><a href="#How-to-build-up-your-hexo-on-Github-Page" class="headerlink" title="How to build up your hexo on Github Page"></a>How to build up your hexo on Github Page</h3><p><strong>Firstly, you need to sign up a github account and build a repo which has the same name with your github</strong>.</p><blockquote><p>github name : JasonWang0808<br>gitpage name : JasonWang0808.github.io</p></blockquote><p><strong>Secondly, prepare the hexo</strong></p><p><strong>The set up steps are as followed</strong>:<br><strong>Step1.</strong> Install <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> and <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> and make sure they have been installed properly.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Win+R </span><br><span class="line">cmd</span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">git -<span class="keyword">version</span></span><br></pre></td></tr></table></figure><p><strong>step2.</strong> Prepare the SSH key and goto the github “SSH and GPG keys” to fill in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#open the git bash</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># type enter three times</span></span><br><span class="line">cd C:\Users\Administrator\.ssh</span><br><span class="line">cat id_rsa.pub</span><br><span class="line"><span class="comment"># copy the content</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#evaluate</span></span><br><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br><span class="line"><span class="comment">## return Hi</span></span><br></pre></td></tr></table></figure><p><strong>step3.</strong> Install hexo</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> xxx</span><br><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br><span class="line">hexo init Hexo </span><br><span class="line"><span class="keyword">cd</span> /Hexo </span><br><span class="line">npm instal </span><br><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span>（可简写为hexo <span class="keyword">g</span>） </span><br><span class="line">hexo sever（可简写为hexo s）</span><br><span class="line">npm install –<span class="keyword">save</span> hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>step4.</strong> Modify the config</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use sublime to open /blog/_config.yml and find "deploy"</span></span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p><strong>step5.</strong> modify <strong>./config.yml</strong> and <strong>./themes/next/config.yml</strong> depends on your hobby</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><strong>Step6.</strong> next, you can change your theme and add more decorations to your website  </p><h4 id="A-good-way-to-learn-to-decoration"><a href="#A-good-way-to-learn-to-decoration" class="headerlink" title="A good way to learn to decoration"></a><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">A good way to learn to decoration</a></h4><p><strong>step5.</strong> modify <strong>./config.yml</strong> and <strong>./themes/next/config.yml</strong> depends on your hobby</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><strong>Step7.</strong> start to write on your github page with hexo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"xxx"</span></span><br><span class="line"><span class="comment"># this can help you to build a new xx.md</span></span><br><span class="line">hexo new page <span class="string">"xxx"</span></span><br><span class="line"><span class="comment"># this help you to build a new page, for example, "categories"</span></span><br></pre></td></tr></table></figure><h4 id="Every-xx-md-has-its-head-for-example-Title-is-the-name-Tags-are-tags-you-know-categories-is-a-big-package-containing-all-the-essays-with-this-category"><a href="#Every-xx-md-has-its-head-for-example-Title-is-the-name-Tags-are-tags-you-know-categories-is-a-big-package-containing-all-the-essays-with-this-category" class="headerlink" title="Every xx.md has its head, for example, Title is the name. Tags are tags, you know. categories is a big package containing all the essays with this category"></a>Every xx.md has its head, for example, Title is the name. Tags are tags, you know. categories is a big package containing all the essays with this category</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Notes</span> <span class="string">of</span> <span class="string">LeetCode(一)</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[leetcode,</span> <span class="string">c++,algorithm]</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">leetcodeNotes</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>Finally, you can use Tengxun cloud to get a domain for your page</strong><br>There are two records you need to add<br><img src="https://github.com/JasonWang0808/JasonWang0808.github.io/blob/master/pictures/hexo/how%20to%20build/picture1.png" alt="image"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get the ip address of your page </span></span><br><span class="line">ping www.xx.github.io</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;How-to-build-up-your-hexo-on-Github-Page&quot;&gt;&lt;a href=&quot;#How-to-build-up-your-hexo-on-Github-Page&quot; class=&quot;headerlink&quot; title=&quot;How to build
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Notes of LeetCode (a)</title>
    <link href="http://yoursite.com/2018/10/20/leetcode/"/>
    <id>http://yoursite.com/2018/10/20/leetcode/</id>
    <published>2018-10-20T11:13:06.252Z</published>
    <updated>2018-10-20T15:20:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h3><p>Ⅰ.  <strong>DATA STRUCTURE: HashMap</strong></p><blockquote><p>HashMap is a quick way to find elements in the time complexity of O(1) and is commonly used in leetcode.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Charactor,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br></pre></td></tr></table></figure><p>Ⅱ. <strong>Method:Sliding Window</strong><br>The sliding window is an abstract concept <strong>commonly used in array/String problem</strong>s. It likes <strong>Dynamic Programming</strong>, because we don’t know the answer until we finish it.</p><p>The length is <strong>j - i</strong> because the arrange is [i, j) (left-closed, right-open). We set the <strong>ANS</strong> to record the longest answer.</p><p>Once we find our next number is replucated in our map, we change the i to the number in our map, same with truncating. Then next, until we reach the end of the array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//map.put  map.get    map.containsKey</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = s.length();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; l &amp;&amp; j &lt; l)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(j)))&#123; <span class="comment">//if next element in the map</span></span><br><span class="line">                i = Math.max(map.get(s.charAt(j)) + <span class="number">1</span>, i); <span class="comment">// abba, max is to prevent : "a" in the end makes i be '0'</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j-i+<span class="number">1</span>); <span class="comment">// keep the bigger ans</span></span><br><span class="line">            map.put(s.charAt(j), j); <span class="comment">// refresh the map</span></span><br><span class="line">            j ++; <span class="comment">// goto next number</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;3-Longest-Substring-Without-Repeating-Characters&quot;&gt;&lt;a href=&quot;#3-Longest-Substring-Without-Repeating-Characters&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="leetcodeNotes" scheme="http://yoursite.com/categories/leetcodeNotes/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="http://yoursite.com/2018/10/19/New%20begining/"/>
    <id>http://yoursite.com/2018/10/19/New begining/</id>
    <published>2018-10-19T14:00:04.183Z</published>
    <updated>2018-10-20T09:06:37.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-JunYu-Wang’s-site"><a href="#Welcome-to-JunYu-Wang’s-site" class="headerlink" title="Welcome to JunYu Wang’s site"></a>Welcome to JunYu Wang’s site</h2><h3 id="I-am-proud-that-I’ve-keep-writing-blogs-for-almost-half-year-in-2018-The-content-are-as-followed"><a href="#I-am-proud-that-I’ve-keep-writing-blogs-for-almost-half-year-in-2018-The-content-are-as-followed" class="headerlink" title="I am proud that I’ve keep writing blogs for almost half year in 2018. The content are as followed."></a>I am proud that I’ve keep writing blogs for almost half year in 2018. The content are as followed.</h3><ul><li style="list-style: none"><input type="checkbox" checked> Notes of the CS system and data structure from the class</li><li style="list-style: none"><input type="checkbox" checked> Notes of the Deep-learning courses from Udacity</li><li style="list-style: none"><input type="checkbox" checked> ….</li></ul><hr><h3 id="The-reason-why-today-is-very-important-is-that-I-realize-that-my-blogs-shouldn’t-have-been-regarded-as-merely-“records-of-my-study”-It-should-be-more-formal-more-beautiful-more-ordered-and-most-importantly-more-inspiring"><a href="#The-reason-why-today-is-very-important-is-that-I-realize-that-my-blogs-shouldn’t-have-been-regarded-as-merely-“records-of-my-study”-It-should-be-more-formal-more-beautiful-more-ordered-and-most-importantly-more-inspiring" class="headerlink" title="The reason why today is very important is that I realize that my blogs shouldn’t have been regarded as merely “records of my study”. It should be more formal, more beautiful, more ordered, and most importantly, more inspiring."></a>The reason why today is very important is that I realize that my blogs shouldn’t have been regarded as merely “records of my study”. It should be more formal, more beautiful, more ordered, and most importantly, more inspiring.</h3><h4 id="I-always-like-new-beginings-and-new-challanges-which-make-me-feel-alive-So-I-want-to-delve-furture-into-some-specific-areas-of-study-to-equip-myself-to-be-more-professional"><a href="#I-always-like-new-beginings-and-new-challanges-which-make-me-feel-alive-So-I-want-to-delve-furture-into-some-specific-areas-of-study-to-equip-myself-to-be-more-professional" class="headerlink" title="I always like new beginings and new challanges, which make me feel alive. So I want to delve furture into some specific areas of study to equip myself to be more professional."></a>I always like new beginings and new challanges, which make me feel alive. So I want to delve furture into some specific areas of study to equip myself to be more professional.</h4><ul><li style="list-style: none"><input type="checkbox"> Notes of how to deal with the problems on Leetcode</li><li style="list-style: none"><input type="checkbox"> Notes of deeper details of algorithm such as object detection</li><li style="list-style: none"><input type="checkbox"> Notes of new classes in new school</li><li style="list-style: none"><input type="checkbox"> …..</li><li></li></ul><p><strong>CLICK “About” to see my RESUME</strong></p><p><strong>CLICK “Categories” to see all the topics of my articles</strong> </p><p><strong>CLICK “Tags”… OOPS, this is under building</strong></p><p><strong>CLICK “Search” to find the topic you have interests on</strong></p><p><em>Hope you Enjoy this</em></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (you have any questions)</span><br><span class="line">&#123;</span><br><span class="line">    case email:</span><br><span class="line">        wangjunyu0808@gmail.com;</span><br><span class="line">    case insgram:</span><br><span class="line">        wangjunyu0808;</span><br><span class="line">    case wechat:</span><br><span class="line">        HeNeArKrXnTn</span><br><span class="line">    default;</span><br><span class="line">&#125;</span><br><span class="line">I will be happy <span class="keyword">to</span> share ideas with you</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Welcome-to-JunYu-Wang’s-site&quot;&gt;&lt;a href=&quot;#Welcome-to-JunYu-Wang’s-site&quot; class=&quot;headerlink&quot; title=&quot;Welcome to JunYu Wang’s site&quot;&gt;&lt;/a&gt;We
      
    
    </summary>
    
    
  </entry>
  
</feed>
