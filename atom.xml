<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junyu Wang&#39;s Blog</title>
  
  <subtitle>hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-01T12:32:18.616Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JunYu Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reinforcement Learning (Second)</title>
    <link href="http://yoursite.com/2018/11/01/Reinforce_Learning2/"/>
    <id>http://yoursite.com/2018/11/01/Reinforce_Learning2/</id>
    <published>2018-11-01T02:55:19.115Z</published>
    <updated>2018-11-01T12:32:18.616Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script></p><h4 id="Reference-An-introduction-to-Deep-Q-Learning-let’s-play-Doom"><a href="#Reference-An-introduction-to-Deep-Q-Learning-let’s-play-Doom" class="headerlink" title="Reference : An introduction to Deep Q-Learning: let’s play Doom"></a>Reference : <a href="https://medium.freecodecamp.org/an-introduction-to-deep-q-learning-lets-play-doom-54d02d8017d8/" target="_blank" rel="noopener">An introduction to Deep Q-Learning: let’s play Doom</a></h4><h3 id="Deep-Q-Learning-Network-DQN"><a href="#Deep-Q-Learning-Network-DQN" class="headerlink" title="Deep Q-Learning Network (DQN)"></a>Deep Q-Learning Network (DQN)</h3><h5 id="1-深度强化学习"><a href="#1-深度强化学习" class="headerlink" title="1. 深度强化学习"></a>1. 深度强化学习</h5><p>对于一个复杂的游戏，表示动作及其Value、在Q表里搜索相应的动作变得十分没有效率。因此这里改用神经网络进行Q表的计算。  每次将S放入，即可计算出相应的action及对应的value</p><blockquote><p>\(w\)表示神经网络的权值，\(R\)表示Reward，\(Q\)表示Q表中相应状态和动作对应的数值  </p></blockquote><p>$$<br>current\_predict\_Q = \hat{Q}(s,a,w)<br>$$  </p><p>$$<br>Grdient = \bigtriangledown \hat{Q}(s,a,w)<br>$$   </p><p>$$<br>\Delta w(TDerror) = \alpha[R + \gamma max_{a} \hat{Q}(s\prime ,a, w)) - current\_predict\_Q]<br>$$   </p><h5 id="2-主要优化方法"><a href="#2-主要优化方法" class="headerlink" title="2. 主要优化方法"></a>2. 主要优化方法</h5><blockquote><p>经验回放(Experience Deplay)和固定Q目标是其中的两个主要贡献</p></blockquote><ul><li>经验回放<br>有些动作的代价很大，我们可以把经历过的  \(&lt;S_{t}, A_{t}, R_{t+1}, S_{t+1}&gt;\) 储存在缓冲区中(replay buffer)，后面可以再次用来学习。并可以采取<strong>优先经验回收</strong><br>我们认为，loss越大的数值越具有学习价值，因此buffer里的所有数据都根据其loss决定被选择的概率，每一次学习之后都会更新其概率\(p(i)=\frac{p_{i}^{a}}{\sum_{k=1}^{n} p_{k}^{a}}\),这里的\(a\)保证了不完全按照概率，减少过拟合。（a=1时完全按照概率选取）</li></ul><blockquote><p>研究证明，优先经验回收策略可以减少迭代次数</p></blockquote><ul><li>Q固定<br>我们可以看到在我们的\(R + \gamma max_{a} \hat{Q}(s\prime ,a, w)\)和\(\hat{Q}(s,a,w)\)中都有\(w\)存在。因此两者都在变，导致无法持续收敛。<blockquote><p>打个比方。小明在追他养的牛，想要不断向他的牛靠近。然而他的牛的位置（Q）因为\(w\)的改变也在不断变化。可能一会在小明前，一会去小明后。小明也会懵逼，到底该往哪个方向追。因此我们将\(w^{-}\)固定，事后更新\(w^{-} \gets w\)。这样保证了在收敛过程中目标是确定的不会变化。</p></blockquote></li></ul><p>$$<br>\Delta w(TDerror) = \alpha[R + \gamma max_{a} \hat{Q}(s\prime ,a, w^{-})) - \hat{Q}(s,a,w)]\bigtriangledown \hat{Q}(s,a,w)<br>$$   </p><blockquote><p>Thrun 和 Schwartz，1993 年，<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.73.3097" target="_blank" rel="noopener">《使用函数逼近进行强化学习存在的问题》（ 高估 Q 值）</a><br>van Hasselt et al.，2015 年，<a href="https://arxiv.org/abs/1509.06461" target="_blank" rel="noopener">《双 Q 学习的深度强化学习》</a><br>Schaul et al.，2016 年，<a href="https://arxiv.org/abs/1511.05952" target="_blank" rel="noopener">《优先经验回放》</a><br>Wang et al.，2015 年，<a href="https://arxiv.org/abs/1511.06581/" target="_blank" rel="noopener">《深度强化学习的对抗网络架构》</a><br>Hausknecht 和 Stone，2015 年，<a href="https://arxiv.org/abs/1507.06527/" target="_blank" rel="noopener">《部分可观察 MDP 的深度递归 Q 学习》</a>    </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h4 id=&quot;Referenc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Basic Rules of Tensorflow</title>
    <link href="http://yoursite.com/2018/10/31/tensorflow_basic/"/>
    <id>http://yoursite.com/2018/10/31/tensorflow_basic/</id>
    <published>2018-10-31T13:20:12.830Z</published>
    <updated>2018-11-01T12:31:48.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见符号"><a href="#常见符号" class="headerlink" title="常见符号"></a>常见符号</h2><h3 id="1-tf-Variable-与-tf-constant"><a href="#1-tf-Variable-与-tf-constant" class="headerlink" title="1. tf.Variable 与 tf.constant"></a>1. tf.Variable 与 tf.constant</h3><blockquote><p>第一个可以根据计算改变，第二个是不能变的, 因此神经网络的权值通常都是Variable<br>另外要注意, 定义了变量和常量之后，要初始化才能使用</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init = <span class="keyword">tf</span>.global_variables_initializer()</span><br><span class="line">with <span class="keyword">tf</span>.Session() <span class="keyword">as</span> ses<span class="variable">s:</span></span><br><span class="line">    sess.run(init)</span><br></pre></td></tr></table></figure><h3 id="2-tf-reduce-mean"><a href="#2-tf-reduce-mean" class="headerlink" title="2. tf.reduce_mean"></a>2. tf.reduce_mean</h3><blockquote><p>取平均值，后面跟1是取行，跟0是取列</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">x = np.array([[1.,2.,3.],[4.,5.,6.]])</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    mean_none = sess.<span class="builtin-name">run</span>(tf.reduce_mean(x))</span><br><span class="line">    mean_1 = sess.<span class="builtin-name">run</span>(tf.reduce_mean(x,1))</span><br><span class="line">    mean_2 = sess.<span class="builtin-name">run</span>(tf.reduce_mean(x,0))</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(mean_none)</span><br><span class="line">    <span class="builtin-name">print</span>(mean_1)</span><br><span class="line">    <span class="builtin-name">print</span>(mean_2)</span><br></pre></td></tr></table></figure><h3 id="3-tf-equal"><a href="#3-tf-equal" class="headerlink" title="3. tf.equal"></a>3. tf.equal</h3><blockquote><p>分别比较矩阵中相同的元素，相同就返回true,不同就返回false</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf  </span><br><span class="line"> import numpy as np  </span><br><span class="line">   </span><br><span class="line"> A = <span class="string">[[1,3,4,5,6]]</span>  </span><br><span class="line"> B = <span class="string">[[1,3,4,3,2]]</span>  </span><br><span class="line">   </span><br><span class="line"> with tf.Session() as sess:  </span><br><span class="line">     <span class="built_in">print</span>(sess.run(tf.equal(A, B)))</span><br></pre></td></tr></table></figure><h3 id="4-tf-truncated-normal"><a href="#4-tf-truncated-normal" class="headerlink" title="4. tf.truncated_normal"></a>4. tf.truncated_normal</h3><blockquote><p>shape 表示要生成的矩阵的大小<br>mean 表示正态函数的均值<br>stddev表示要生成的随机数的方差<br>seed 是随机数种，通常条件下为None</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.random_normal(shape, <span class="attribute">mean</span>=0.0, <span class="attribute">stddev</span>=1.0, <span class="attribute">dtype</span>=tf.float32, <span class="attribute">seed</span>=None, <span class="attribute">name</span>=None)</span><br></pre></td></tr></table></figure><h3 id="5-tf-reshape"><a href="#5-tf-reshape" class="headerlink" title="5. tf.reshape"></a>5. tf.reshape</h3><blockquote><p>更改矩阵的大小, 通常对图像进行改变<br>参数中可以指定一个 -1 （且只能有一个）, 将根据其他参数的指定自动计算出该维度</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/m0_37592397/</span>article<span class="regexp">/details/</span><span class="number">78695318</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见符号&quot;&gt;&lt;a href=&quot;#常见符号&quot; class=&quot;headerlink&quot; title=&quot;常见符号&quot;&gt;&lt;/a&gt;常见符号&lt;/h2&gt;&lt;h3 id=&quot;1-tf-Variable-与-tf-constant&quot;&gt;&lt;a href=&quot;#1-tf-Variable-与-tf
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flower Classification via VGG</title>
    <link href="http://yoursite.com/2018/10/31/flower_classification/"/>
    <id>http://yoursite.com/2018/10/31/flower_classification/</id>
    <published>2018-10-31T13:18:31.258Z</published>
    <updated>2018-11-01T12:31:36.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用vgg迁移学习实现花朵的分类，基于tensorflow进行实现"><a href="#利用vgg迁移学习实现花朵的分类，基于tensorflow进行实现" class="headerlink" title="利用vgg迁移学习实现花朵的分类，基于tensorflow进行实现"></a>利用vgg迁移学习实现花朵的分类，基于tensorflow进行实现</h3><h4 id="为什么要迁移学习"><a href="#为什么要迁移学习" class="headerlink" title="为什么要迁移学习"></a>为什么要迁移学习</h4><blockquote><h5 id="一个好的CNN可以判断出一个图片的基本轮廓-我们利用这个训练好的CNN得到轮廓并扁平化处理-我们要做的就是搭建ANN-来实现我们自己的classifier"><a href="#一个好的CNN可以判断出一个图片的基本轮廓-我们利用这个训练好的CNN得到轮廓并扁平化处理-我们要做的就是搭建ANN-来实现我们自己的classifier" class="headerlink" title="一个好的CNN可以判断出一个图片的基本轮廓, 我们利用这个训练好的CNN得到轮廓并扁平化处理, 我们要做的就是搭建ANN, 来实现我们自己的classifier"></a>一个好的CNN可以判断出一个图片的基本轮廓, 我们利用这个训练好的CNN得到轮廓并扁平化处理, 我们要做的就是搭建ANN, 来实现我们自己的classifier</h5><p><a href="http://setosa.io/ev/image-kernels/" target="_blank" rel="noopener">一个理解的网站</a></p></blockquote><h3 id="首先介绍两个比较常用的方法"><a href="#首先介绍两个比较常用的方法" class="headerlink" title="首先介绍两个比较常用的方法"></a>首先介绍两个比较常用的方法</h3><h4 id="1-单热点编码"><a href="#1-单热点编码" class="headerlink" title="1. 单热点编码"></a>1. 单热点编码</h4><blockquote><h5 id="在这里我们有五种花-他们的名字都是中文-我们需要对他进行编码"><a href="#在这里我们有五种花-他们的名字都是中文-我们需要对他进行编码" class="headerlink" title="在这里我们有五种花, 他们的名字都是中文, 我们需要对他进行编码"></a>在这里我们有五种花, 他们的名字都是中文, 我们需要对他进行编码</h5></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* labels是我们要编码的str数组，生成了labels_vecs的二维单热点编码  */</span><br><span class="line">from sklearn.preprocessing import LabelBinarizer</span><br><span class="line"></span><br><span class="line">lb = LabelBinarizer()</span><br><span class="line">lb.fit(labels)</span><br><span class="line"></span><br><span class="line">labels_vecs = lb.transform(labels)</span><br></pre></td></tr></table></figure><p><strong>array</strong><br>([[0, 1, 0, 0, 0],<br>       [0, 1, 0, 0, 0],<br>       [0, 1, 0, 0, 0],<br>       …,<br>       [0, 0, 0, 1, 0],<br>       [0, 0, 0, 1, 0],<br>       [0, 0, 0, 1, 0]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="2-分类—我们需要随机的分出test、valid和Train"><a href="#2-分类—我们需要随机的分出test、valid和Train" class="headerlink" title="2. 分类—我们需要随机的分出test、valid和Train"></a>2. 分类—我们需要随机的分出test、valid和Train</h4><blockquote><h5 id="这里使用机器学习库-how-to-use"><a href="#这里使用机器学习库-how-to-use" class="headerlink" title="这里使用机器学习库 how to use"></a>这里使用机器学习库 <a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedShuffleSplit.html" target="_blank" rel="noopener">how to use</a></h5></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.model_selection <span class="built_in">import</span> StratifiedShuffleSplit</span><br><span class="line"><span class="comment">/*  固定搭配，里面的参数要弄懂  */</span></span><br><span class="line"><span class="attr">ss</span> = StratifiedShuffleSplit(<span class="attr">n_splits=1,</span> <span class="attr">test_size=0.2)</span></span><br><span class="line"><span class="comment">/* 注意一定要加next，这里返回的是indices（指数） 即数标  */</span></span><br><span class="line">train_idx, <span class="attr">val_idxs</span> = next(ss.split(codes,labels_vecs))</span><br><span class="line"></span><br><span class="line"><span class="attr">half_val</span> = int(len(val_idxs)/<span class="number">2</span>)</span><br><span class="line"><span class="comment">/*  把valid拆分成valid和test    */</span></span><br><span class="line"></span><br><span class="line">val_idx,<span class="attr">test_idx</span> = val_idxs[:half_val],val_idxs[half_val:]</span><br><span class="line"></span><br><span class="line">train_x, <span class="attr">train_y</span> = codes[train_idx],labels_vecs[train_idx]</span><br><span class="line"></span><br><span class="line">val_x, <span class="attr">val_y</span> = codes[val_idx],labels_vecs[val_idx]</span><br><span class="line">test_x, <span class="attr">test_y</span> =  codes[test_idx],labels_vecs[test_idx]</span><br></pre></td></tr></table></figure><h4 id="3-储存结果"><a href="#3-储存结果" class="headerlink" title="3. 储存结果"></a>3. 储存结果</h4><blockquote><h5 id="每次训练结束都要把参数的结果储存到checkpoint中来-下一次test时候直接进行调用"><a href="#每次训练结束都要把参数的结果储存到checkpoint中来-下一次test时候直接进行调用" class="headerlink" title="每次训练结束都要把参数的结果储存到checkpoint中来, 下一次test时候直接进行调用"></a>每次训练结束都要把参数的结果储存到checkpoint中来, 下一次test时候直接进行调用</h5></blockquote><h4 id="4-计算主体"><a href="#4-计算主体" class="headerlink" title="4. 计算主体"></a>4. 计算主体</h4><blockquote><h5 id="外部一个epochs的循环，内部一个计算函数"><a href="#外部一个epochs的循环，内部一个计算函数" class="headerlink" title="外部一个epochs的循环，内部一个计算函数"></a>外部一个epochs的循环，内部一个计算函数</h5></blockquote><h4 id="储存结果"><a href="#储存结果" class="headerlink" title="储存结果"></a>储存结果</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  详见training部分 */</span></span><br><span class="line">saver.<span class="keyword">save</span>(sess, <span class="string">"checkpoints/flowers.ckpt"</span>)</span><br></pre></td></tr></table></figure><h4 id="加载结果进行使用"><a href="#加载结果进行使用" class="headerlink" title="加载结果进行使用"></a>加载结果进行使用</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 先迁移得到一维矩阵，然后Saver加载参数，test一边   */</span></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    <span class="selector-tag">img</span> = utils.load_image(test_img_path)</span><br><span class="line">    <span class="selector-tag">img</span> = <span class="selector-tag">img</span>.reshape((<span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    feed_dict = &#123;input_: img&#125;</span><br><span class="line">    <span class="selector-tag">code</span> = sess.run(vgg<span class="selector-class">.relu6</span>, feed_dict=feed_dict)</span><br><span class="line">        </span><br><span class="line">saver = tf<span class="selector-class">.train</span><span class="selector-class">.Saver</span>()</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    saver.restore(sess, tf<span class="selector-class">.train</span><span class="selector-class">.latest_checkpoint</span>(<span class="string">'checkpoints'</span>))</span><br><span class="line">    </span><br><span class="line">    feed = &#123;inputs_: code&#125;</span><br><span class="line">    prediction = sess.run(predicted, feed_dict=feed).squeeze()</span><br></pre></td></tr></table></figure><h4 id="data-cutting"><a href="#data-cutting" class="headerlink" title="data cutting"></a>data cutting</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 设置函数<span class="number">10</span>个图片的处理    */</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batches</span><span class="params">(x, y, n_batches=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Return a generator that yields batches from arrays x and y. """</span></span><br><span class="line">    batch_size = len(x)//n_batches</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(<span class="number">0</span>, n_batches*batch_size, batch_size):</span><br><span class="line">        <span class="comment"># If we're not on the last batch, grab data with size batch_size</span></span><br><span class="line">        <span class="keyword">if</span> ii != (n_batches<span class="number">-1</span>)*batch_size:</span><br><span class="line">            X, Y = x[ii: ii+batch_size], y[ii: ii+batch_size] </span><br><span class="line">        <span class="comment"># On the last batch, grab the rest of the data</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X, Y = x[ii:], y[ii:]</span><br><span class="line">        <span class="comment"># I love generators</span></span><br><span class="line">        <span class="keyword">yield</span> X, Y</span><br></pre></td></tr></table></figure><h4 id="building-NN"><a href="#building-NN" class="headerlink" title="building NN"></a>building NN</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">inputs_ = tf.placeholder(tf.float32, shape=[None, codes.shape[1]])</span><br><span class="line">labels_ = tf.placeholder(tf.int64, shape=[None, labels_vecs.shape[1]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Classifier layers and operations</span></span><br><span class="line">/* 搭建一个简单的ANN   */</span><br><span class="line">fc = tf.contrib.layers.fully_connected(inputs_,256)</span><br><span class="line"></span><br><span class="line">logits = tf.contrib.layers.fully_connected(fc, labels_vecs.shape[1], activation_fn=None)</span><br><span class="line">cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=labels_, logits=logits)</span><br><span class="line">cost = tf.reduce_mean(cross_entropy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimizer =  tf.train.AdamOptimizer().minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Operations for validation/test accuracy</span></span><br><span class="line">predicted = tf.nn.softmax(logits)</span><br><span class="line">correct_pred = tf.equal(tf.argmax(predicted, 1), tf.argmax(labels_, 1))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))</span><br></pre></td></tr></table></figure><h4 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">epochs = 10</span><br><span class="line">iteration = 0</span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    </span><br><span class="line">    sess.<span class="builtin-name">run</span>(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> get_batches(train_x, train_y):</span><br><span class="line">            feed = &#123;inputs_: x,</span><br><span class="line">                    labels_: y&#125;</span><br><span class="line">            loss, _ = sess.<span class="builtin-name">run</span>([cost, optimizer], <span class="attribute">feed_dict</span>=feed)</span><br><span class="line">            <span class="builtin-name">print</span>(<span class="string">"Epoch: &#123;&#125;/&#123;&#125;"</span>.format(e+1, epochs),</span><br><span class="line">                  <span class="string">"Iteration: &#123;&#125;"</span>.format(iteration),</span><br><span class="line">                  <span class="string">"Training loss: &#123;:.5f&#125;"</span>.format(loss))</span><br><span class="line">            iteration += 1</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> iteration % 5 == 0:</span><br><span class="line">                feed = &#123;inputs_: val_x,</span><br><span class="line">                        labels_: val_y&#125;</span><br><span class="line">                val_acc = sess.<span class="builtin-name">run</span>(accuracy, <span class="attribute">feed_dict</span>=feed)</span><br><span class="line">                <span class="builtin-name">print</span>(<span class="string">"Epoch: &#123;&#125;/&#123;&#125;"</span>.format(e, epochs),</span><br><span class="line">                      <span class="string">"Iteration: &#123;&#125;"</span>.format(iteration),</span><br><span class="line">                      <span class="string">"Validation Acc: &#123;:.4f&#125;"</span>.format(val_acc))</span><br><span class="line">    saver.save(sess, <span class="string">"checkpoints/flowers.ckpt"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;利用vgg迁移学习实现花朵的分类，基于tensorflow进行实现&quot;&gt;&lt;a href=&quot;#利用vgg迁移学习实现花朵的分类，基于tensorflow进行实现&quot; class=&quot;headerlink&quot; title=&quot;利用vgg迁移学习实现花朵的分类，基于tensorf
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OBject claasification via Resnet50</title>
    <link href="http://yoursite.com/2018/10/31/Model_detexting_1/"/>
    <id>http://yoursite.com/2018/10/31/Model_detexting_1/</id>
    <published>2018-10-31T13:14:17.923Z</published>
    <updated>2018-11-01T12:31:05.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="how-to-detect-a-model"><a href="#how-to-detect-a-model" class="headerlink" title="how to detect a model"></a>how to detect a model</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing import image                  </span><br><span class="line"><span class="keyword">from</span> tqdm import tqdm</span><br><span class="line"></span><br><span class="line">def path_to_tensor(img_path):</span><br><span class="line">    # loads RGB image as PIL.Image.Image type</span><br><span class="line">    img = image.load_img(img_path, target_size=(224, 224))</span><br><span class="line">    # convert PIL.Image.Image<span class="built_in"> type </span><span class="keyword">to</span> 3D tensor with shape (224, 224, 3)</span><br><span class="line">    x = image.img_to_array(img)</span><br><span class="line">    # convert 3D tensor <span class="keyword">to</span> 4D tensor with shape (1, 224, 224, 3) <span class="keyword">and</span> return 4D tensor</span><br><span class="line">    return np.expand_dims(x, <span class="attribute">axis</span>=0)</span><br><span class="line"></span><br><span class="line">def paths_to_tensor(img_paths):</span><br><span class="line">    list_of_tensors = [path_to_tensor(img_path) <span class="keyword">for</span> img_path <span class="keyword">in</span> tqdm(img_paths)]</span><br><span class="line">    return np.vstack(list_of_tensors)</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a" target="_blank" rel="noopener">you can check in this Dictionary</a>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.applications.resnet50 <span class="keyword">import</span> preprocess_input, decode_predictions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ResNet50_predict_labels</span><span class="params">(img_path)</span>:</span></span><br><span class="line">    <span class="comment"># returns prediction vector for image located at img_path</span></span><br><span class="line">    img = preprocess_input(path_to_tensor(img_path))</span><br><span class="line">    <span class="keyword">return</span> np.argmax(ResNet50_model.predict(img))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;how-to-detect-a-model&quot;&gt;&lt;a href=&quot;#how-to-detect-a-model&quot; class=&quot;headerlink&quot; title=&quot;how to detect a model&quot;&gt;&lt;/a&gt;how to detect a model&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些在图像处理上常用的方法</title>
    <link href="http://yoursite.com/2018/10/31/basic%20operations%20of%20CV/"/>
    <id>http://yoursite.com/2018/10/31/basic operations of CV/</id>
    <published>2018-10-31T13:08:51.191Z</published>
    <updated>2018-11-01T12:31:44.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-获取图像目录"><a href="#1-获取图像目录" class="headerlink" title="1. 获取图像目录"></a>1. 获取图像目录</h3><blockquote><h3 id="glob-cv2"><a href="#glob-cv2" class="headerlink" title="glob, cv2"></a>glob, cv2</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">files_path = glob.glob(<span class="string">r'flower/*'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(files_path[<span class="number">1</span>])</span><br><span class="line">img = cv2.reshape(img, (<span class="number">224</span>,<span class="number">224</span>))</span><br><span class="line"></span><br><span class="line">size = img.size()</span><br><span class="line">print(size)</span><br></pre></td></tr></table></figure><h3 id="2-将图像矩阵连接"><a href="#2-将图像矩阵连接" class="headerlink" title="2. 将图像矩阵连接"></a>2. 将图像矩阵连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">codes = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> codes <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    codes = code_batch</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    codes = np.concatnate((codes,code_batch))</span><br></pre></td></tr></table></figure><h3 id="3-将图像矩阵（经过CNN处理完）写入txt，并将结果一并储存"><a href="#3-将图像矩阵（经过CNN处理完）写入txt，并将结果一并储存" class="headerlink" title="3. 将图像矩阵（经过CNN处理完）写入txt，并将结果一并储存"></a>3. 将图像矩阵（经过CNN处理完）写入txt，并将结果一并储存</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'codes'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    codes.tofile(f)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'labels'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f,delimiter=<span class="string">'\n'</span>)</span><br><span class="line">    writer.writerow(labels)</span><br></pre></td></tr></table></figure><h3 id="4-将图像矩阵（经过CNN处理完）从txt和CSV读出"><a href="#4-将图像矩阵（经过CNN处理完）从txt和CSV读出" class="headerlink" title="4. 将图像矩阵（经过CNN处理完）从txt和CSV读出"></a>4. 将图像矩阵（经过CNN处理完）从txt和CSV读出</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'labels'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f,delimiter=<span class="string">'\n'</span>)</span><br><span class="line">    labels = np.array([<span class="keyword">each</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">in</span> reader <span class="keyword">if</span> <span class="built_in">len</span>(<span class="keyword">each</span>) &gt; <span class="number">0</span>] ).squeeze()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'codes'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    codes = np.fromfile(f, dtype=np.float32)</span><br><span class="line">    codes = np.codes.reshape(<span class="built_in">len</span>(labels),<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="5-图像读出并存回"><a href="#5-图像读出并存回" class="headerlink" title="5. 图像读出并存回"></a>5. 图像读出并存回</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as <span class="built_in">cv</span></span><br><span class="line"># <span class="built_in">load</span> </span><br><span class="line">img = <span class="built_in">cv</span>.imread(imagepath)</span><br><span class="line"># shape=(<span class="built_in">height</span>, <span class="built_in">width</span>, channel)</span><br><span class="line">h,w,c = img.shape</span><br><span class="line"># <span class="built_in">show</span></span><br><span class="line"><span class="built_in">cv</span>.imshow('window_title', img)</span><br><span class="line"># <span class="built_in">save</span></span><br><span class="line"><span class="built_in">cv</span>.imwrite(savepath, img)</span><br></pre></td></tr></table></figure><h3 id="6-图像旋转"><a href="#6-图像旋转" class="headerlink" title="6.图像旋转"></a>6.图像旋转</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">from math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">height</span>,<span class="built_in">width</span>=img.<span class="built_in">shape</span>[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">degree=<span class="number">45</span></span><br><span class="line">#旋转后的尺寸</span><br><span class="line">heightNew=<span class="built_in">int</span>(<span class="built_in">width</span>*fabs(<span class="built_in">sin</span>(<span class="built_in">radians</span>(degree)))+<span class="built_in">height</span>*fabs(<span class="built_in">cos</span>(<span class="built_in">radians</span>(degree))))</span><br><span class="line">widthNew=<span class="built_in">int</span>(<span class="built_in">height</span>*fabs(<span class="built_in">sin</span>(<span class="built_in">radians</span>(degree)))+<span class="built_in">width</span>*fabs(<span class="built_in">cos</span>(<span class="built_in">radians</span>(degree))))</span><br><span class="line"></span><br><span class="line">matRotation=cv2.getRotationMatrix2D((<span class="built_in">width</span>/<span class="number">2</span>,<span class="built_in">height</span>/<span class="number">2</span>),degree,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">matRotation[<span class="number">0</span>,<span class="number">2</span>] +=(widthNew-<span class="built_in">width</span>)/<span class="number">2</span>  #重点在这步，目前不懂为什么加这步</span><br><span class="line">matRotation[<span class="number">1</span>,<span class="number">2</span>] +=(heightNew-<span class="built_in">height</span>)/<span class="number">2</span>  #重点在这步</span><br><span class="line"></span><br><span class="line">imgRotation=cv2.warpAffine(img,matRotation,(widthNew,heightNew),borderValue=(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="7-图像色道分离与合并"><a href="#7-图像色道分离与合并" class="headerlink" title="7. 图像色道分离与合并"></a>7. 图像色道分离与合并</h3><pre><code># 加载图像image = cv2.imread(args[&quot;image&quot;])# 通道分离，注意顺序BGR不是RGB,并且会发现得到的都是灰度图(B, G, R) = cv2.split(image)# 生成一个值为0的单通道数组zeros = np.zeros(image.shape[:2], dtype = &quot;uint8&quot;)# 分别扩展B、G、R成为三通道。另外两个通道用上面的值为0的数组填充cv2.imshow(&quot;Blue&quot;, cv2.merge([B, zeros, zeros]))cv2.imshow(&quot;Green&quot;, cv2.merge([zeros, G, zeros]))cv2.imshow(&quot;Red&quot;, cv2.merge([zeros, zeros, R]))</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-获取图像目录&quot;&gt;&lt;a href=&quot;#1-获取图像目录&quot; class=&quot;headerlink&quot; title=&quot;1. 获取图像目录&quot;&gt;&lt;/a&gt;1. 获取图像目录&lt;/h3&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;glob-cv2&quot;&gt;&lt;a href=&quot;#glob-c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>强化学习（First）</title>
    <link href="http://yoursite.com/2018/10/31/Reinforce_Learning1/"/>
    <id>http://yoursite.com/2018/10/31/Reinforce_Learning1/</id>
    <published>2018-10-31T13:00:28.427Z</published>
    <updated>2018-11-01T12:32:35.763Z</updated>
    
    <content type="html"><![CDATA[<h4 id="我看到网上的强化学习教程通常比较复杂-看完莫烦python后总结出来如下-我将主要用代码形式进行理论的展现-其中个别地方用的是OPENAI的表示方式"><a href="#我看到网上的强化学习教程通常比较复杂-看完莫烦python后总结出来如下-我将主要用代码形式进行理论的展现-其中个别地方用的是OPENAI的表示方式" class="headerlink" title="我看到网上的强化学习教程通常比较复杂, 看完莫烦python后总结出来如下, 我将主要用代码形式进行理论的展现, 其中个别地方用的是OPENAI的表示方式"></a>我看到网上的强化学习教程通常比较复杂, 看完莫烦python后总结出来如下, 我将主要用代码形式进行理论的展现, 其中个别地方用的是OPENAI的表示方式</h4><hr><h3 id="一、回合更新-Monte-Carlo-update"><a href="#一、回合更新-Monte-Carlo-update" class="headerlink" title="一、回合更新(Monte-Carlo update)"></a>一、回合更新(Monte-Carlo update)</h3><h4 id="玩完所有的步数-等到一个episode结束之后再更新数值"><a href="#玩完所有的步数-等到一个episode结束之后再更新数值" class="headerlink" title="玩完所有的步数, 等到一个episode结束之后再更新数值"></a>玩完所有的步数, 等到一个episode结束之后再更新数值</h4><blockquote><p>Monte-Carlo Learning<br>这个方法比较esay, 就是根据尽可能多的经验, 以及平均期望来更新数值。实验成本大, 并且现在很多需要决策的问题是没有结束标志的。  </p></blockquote><h3 id="二、单步更新-Temporal-Difference-update"><a href="#二、单步更新-Temporal-Difference-update" class="headerlink" title="二、单步更新(Temporal-Difference update)"></a>二、单步更新(Temporal-Difference update)</h3><h4 id="每走一步都会更新当前的数值"><a href="#每走一步都会更新当前的数值" class="headerlink" title="每走一步都会更新当前的数值"></a>每走一步都会更新当前的数值</h4><blockquote><p>Q-Learning(off-policy), Sarsa(on-policy)    </p></blockquote><h4 id="1-什么是off-on-policy"><a href="#1-什么是off-on-policy" class="headerlink" title="1. 什么是off/on-policy?"></a>1. 什么是off/on-policy?</h4><h4 id="off-policy的更新value时候的next-action不一定会真实采取-而on-policy更新时候的next-value就是真实采取的"><a href="#off-policy的更新value时候的next-action不一定会真实采取-而on-policy更新时候的next-value就是真实采取的" class="headerlink" title="off-policy的更新value时候的next_action不一定会真实采取, 而on-policy更新时候的next_value就是真实采取的"></a>off-policy的更新value时候的next_action不一定会真实采取, 而on-policy更新时候的next_value就是真实采取的</h4><blockquote><p>小明正在准备高考, 课间的时候小明在思考接下来学习什么知识。首先, 小明想学习数学, 但是小明的数学已经学习的很熟练了，于是<strong>小明并没有拿出课本, 而是在脑海里把课本背诵了一边, 这样一来, 小明虽然没有拿出课本, 但是依然更新了当前的知识,</strong> 接下来小明可能拿出的是英语/语文/物理课本进行学习。这就是我们的off-policy。<strong>倘若是on-policy, 小明就失去了默背这一流程, 想回忆一下数学下一步骤必须拿出数学课本</strong>   </p></blockquote><h4 id="2-epsilon-greedy策略"><a href="#2-epsilon-greedy策略" class="headerlink" title="2. epsilon_greedy策略"></a>2. epsilon_greedy策略</h4><blockquote><p>取到最大值的概率为 <strong>(1-eps) + (eps)/n</strong><br>取到其他n-1种动作的概率为 <strong>(eps)/n</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">epsilon_greedy</span><span class="params">(Q, state, nA, eps)</span>:</span></span><br><span class="line">    <span class="string">"""Selects epsilon-greedy action for supplied state.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Params</span></span><br><span class="line"><span class="string">    ======</span></span><br><span class="line"><span class="string">        Q (dictionary): action-value function</span></span><br><span class="line"><span class="string">        state (int): current state</span></span><br><span class="line"><span class="string">        nA (int): number actions in the environment</span></span><br><span class="line"><span class="string">        eps (float): epsilon</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; eps: </span><br><span class="line">    <span class="comment">#  此时是选取最大数值的action进行返回</span></span><br><span class="line">        <span class="keyword">return</span> np.argmax(Q[state])</span><br><span class="line">    <span class="keyword">else</span>:                     </span><br><span class="line">    <span class="comment"># 这个时候对每个取平均</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(np.arange(env.action_space.n))</span><br></pre></td></tr></table></figure><h4 id="3-Q-learning-with-sarsa-max-off-policy"><a href="#3-Q-learning-with-sarsa-max-off-policy" class="headerlink" title="3. Q-learning with sarsa_max?(off-policy)"></a>3. Q-learning with sarsa_max?(off-policy)</h4><p>sarsa_max: 选取下一状态是value最大的动作更新当前状态  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q-learning Sarsamax</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_Q_sarsamax</span><span class="params">(alpha, gamma, Q, state, action, reward, next_state=None)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Returns updated Q-value for the most recent experience.</span></span><br><span class="line">    </span><br><span class="line">    current = Q[state][action]  <span class="comment"># estimate in Q-table (for current state, action pair)</span></span><br><span class="line">    Qsa_next = np.max(Q[next_state]) <span class="keyword">if</span> next_state <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">    <span class="comment"># find the max q in next_state, but this action is not the real action</span></span><br><span class="line">    target = reward + (gamma * Qsa_next)               <span class="comment"># construct TD target</span></span><br><span class="line">    new_value = current + (alpha * (target - current)) <span class="comment"># get updated value </span></span><br><span class="line">    <span class="keyword">return</span> new_value</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q-learning</span></span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    </span><br><span class="line">    action = epsilon_greedy(Q, state, nA, eps)</span><br><span class="line">    <span class="comment"># epsilon-greedy action selection, get next_action in every interation</span></span><br><span class="line">    next_state, reward, done, info = env.step(action)  <span class="comment"># take action A, observe R, S'</span></span><br><span class="line">    score += reward                                    <span class="comment"># add reward to agent's score</span></span><br><span class="line">    Q[state][action] = update_Q_sarsamax(alpha, gamma, Q, \</span><br><span class="line">                                                 state, action, reward, next_state)        </span><br><span class="line">    state = next_state                                 </span><br><span class="line">    <span class="comment">#只更新状态</span></span><br><span class="line">    <span class="keyword">if</span> done:</span><br><span class="line">        tmp_scores.append(score)                       <span class="comment"># append score</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="4-Sarsa-Learning"><a href="#4-Sarsa-Learning" class="headerlink" title="4. Sarsa Learning"></a>4. Sarsa Learning</h4><p>每次迭代都会选出下一状态和下一状态将要采取的动作，根据事实(update_Q_sarsa)来进行更新<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_Q_sarsa</span><span class="params">(alpha, gamma, Q, state, action, reward, next_state=None, next_action=None)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Returns updated Q-value for the most recent experience.</span></span><br><span class="line">    </span><br><span class="line">    current = Q[state][action]  <span class="comment"># estimate in Q-table (for current state, action pair)</span></span><br><span class="line">    <span class="comment"># get value of state, action pair at next time step</span></span><br><span class="line">    Qsa_next = Q[next_state][next_action] <span class="keyword">if</span> next_state <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="number">0</span>    </span><br><span class="line">    target = reward + (gamma * Qsa_next)               <span class="comment"># construct TD target</span></span><br><span class="line">    new_value = current + (alpha * (target - current)) <span class="comment"># get updated value</span></span><br><span class="line">    <span class="keyword">return</span> new_value</span><br></pre></td></tr></table></figure></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    next_state, reward, done, info = env.step(action) <span class="comment"># take action A, observe R, S'</span></span><br><span class="line">    score += reward                                   <span class="comment"># add reward to agent's score</span></span><br><span class="line">    if not done:</span><br><span class="line">    next_action = epsilon_greedy(Q, next_state, nA, eps) <span class="comment"># epsilon-greedy action</span></span><br><span class="line">    Q[<span class="keyword">state</span>][action] = update_Q_sarsa(alpha, gamma, Q, \</span><br><span class="line">                                                  <span class="keyword">state</span>, action, reward, next_state, next_action)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">state</span> = next_state     <span class="comment"># S &lt;- S'</span></span><br><span class="line">                action = next_action   <span class="comment"># A &lt;- A'</span></span><br><span class="line">                '''</span><br><span class="line">                这里会根据传入update函数的next_action 和 next_state进行更新</span><br><span class="line">                '''</span><br><span class="line">            if done:</span><br><span class="line">                Q[<span class="keyword">state</span>][action] = update_Q_sarsa(alpha, gamma, Q, \</span><br><span class="line">                                                  <span class="keyword">state</span>, action, reward)</span><br><span class="line">                tmp_scores.append(score)    <span class="comment"># append score</span></span><br><span class="line">                break</span><br></pre></td></tr></table></figure><h4 id="5-expected-Sarsa"><a href="#5-expected-Sarsa" class="headerlink" title="5. expected Sarsa"></a>5. expected Sarsa</h4><p>3,4 种描述的更新方法都是取单一action的value, 在期望Sarsa中将对所有的action产生的value计算一个平均期望进行更新  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_Q_expsarsa</span><span class="params">(alpha, gamma, nA, eps, Q, state, action, reward, next_state=None)</span>:</span></span><br><span class="line">    <span class="string">"""Returns updated Q-value for the most recent experience."""</span></span><br><span class="line">    current = Q[state][action]         <span class="comment"># estimate in Q-table (for current state, action pair)</span></span><br><span class="line">    policy_s = np.ones(nA) * eps / nA  </span><br><span class="line">    <span class="comment"># 建立一个向量储存概率，每一个都是 （eps / nA）, nA表示action数量</span></span><br><span class="line">    policy_s[np.argmax(Q[next_state])] = <span class="number">1</span> - eps + (eps / nA) </span><br><span class="line">    <span class="comment"># 将最大value的action的概率变为1 - eps + (eps / nA) </span></span><br><span class="line">    Qsa_next = np.dot(Q[next_state], policy_s)         <span class="comment"># get value of state at next time step</span></span><br><span class="line">    target = reward + (gamma * Qsa_next)               <span class="comment"># construct target</span></span><br><span class="line">    new_value = current + (alpha * (target - current)) <span class="comment"># get updated value </span></span><br><span class="line">    <span class="keyword">return</span> new_value</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;我看到网上的强化学习教程通常比较复杂-看完莫烦python后总结出来如下-我将主要用代码形式进行理论的展现-其中个别地方用的是OPENAI的表示方式&quot;&gt;&lt;a href=&quot;#我看到网上的强化学习教程通常比较复杂-看完莫烦python后总结出来如下-我将主要用代码形式
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c++ basic rules</title>
    <link href="http://yoursite.com/2018/10/30/c++_rules/"/>
    <id>http://yoursite.com/2018/10/30/c++_rules/</id>
    <published>2018-10-30T11:25:06.905Z</published>
    <updated>2018-11-01T12:31:40.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ STL"></a>C++ STL</h3><h4 id="1-map"><a href="#1-map" class="headerlink" title="1. map"></a>1. map</h4><p>This can be use there are some simple rules, for example, an integer refers to a string, like in leetcode12 and leetcode13<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mymap;</span><br><span class="line">    mymap.insert(pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">3</span>,<span class="string">"sdf"</span>));<span class="comment">//using "insert" to do the insert operation</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator iter;<span class="comment">// define an interator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (iter = mymap.begin(); iter != mymap.end(); iter ++)&#123;<span class="comment">// from begin() to the end()</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;iter-&gt;second;<span class="comment">// first and second value</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="c-String"><a href="#c-String" class="headerlink" title="c++ String"></a>c++ String</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">first</span> = str.find(s); // <span class="built_in">return</span> the <span class="built_in">first</span> index of <span class="built_in">substring</span> <span class="string">"s"</span> <span class="keyword">in</span> <span class="string">"str"</span></span><br><span class="line">int <span class="built_in">last</span> = str.find(s); // <span class="built_in">return</span> the <span class="built_in">last</span> index of <span class="built_in">substring</span> <span class="string">"s"</span> <span class="keyword">in</span> <span class="string">"str"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-STL&quot;&gt;&lt;a href=&quot;#C-STL&quot; class=&quot;headerlink&quot; title=&quot;C++ STL&quot;&gt;&lt;/a&gt;C++ STL&lt;/h3&gt;&lt;h4 id=&quot;1-map&quot;&gt;&lt;a href=&quot;#1-map&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Recursion---leetcode</title>
    <link href="http://yoursite.com/2018/10/30/Recursion/"/>
    <id>http://yoursite.com/2018/10/30/Recursion/</id>
    <published>2018-10-30T02:28:18.149Z</published>
    <updated>2018-11-01T12:31:00.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>From my perspective, Recursion is an efficient way because it makes us to <strong>only look at the current step</strong>. However, its <strong>complexity is very high.</strong></p><hr><h4 id="Example1-10-Regular-Expression-Matching-from-Leetcode"><a href="#Example1-10-Regular-Expression-Matching-from-Leetcode" class="headerlink" title="Example1. 10. Regular Expression Matching from Leetcode"></a>Example1. <a href="https://leetcode.com/problems/regular-expression-matching/solution/" target="_blank" rel="noopener">10. Regular Expression Matching</a> from Leetcode</h4><blockquote><p>You can see the description on the above link.  </p></blockquote><p>My problem is that it contains tooooo many different combination of <strong>“character”, “.” and “*“</strong>. It looks like a time array, which you should look at <strong>the moment</strong>. <strong>time before</strong> and the <strong>future</strong>, which is very bothering.   </p><blockquote><p>So what we do here is only determine the current action, and let the function to judge what to do next itself.  </p></blockquote><p>So, given two arries, we have several choices  </p><ol><li>whether reach the end?<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p and s reach the end at the same time</span></span><br><span class="line"><span class="comment"># p reach the end, but s doesn't</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(s, p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p.empty())&#123;</span><br><span class="line"><span class="keyword">if</span>(s == empty()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">2. if the first character match?</span></span><br></pre></td></tr></table></figure></li></ol><p>def isMatch(s, p){<br>    bool first_match;<br>    if(s[0] == p[0] || p[0] == ‘.’) first_match = true;</p><p>}<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> <span class="keyword">is</span> <span class="keyword">it</span> followed <span class="keyword">by</span> * ?</span><br></pre></td></tr></table></figure></p><p>def isMatch(s, p){<br>    if(p.length() &gt;= 2 || p[1] == ‘<em>‘): # the second character of p is </em></p><pre><code># this if means: * is 0 or not    return isMatch(s, p.substr(2)) || (first_match &amp;&amp; isMatch(s.substr(1), p)else:    return first_match &amp;&amp; isMatch(s.substr(1), p.substr(1))</code></pre><p>}<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The complete <span class="selector-tag">code</span> <span class="keyword">in</span> C++</span><br></pre></td></tr></table></figure></p><p>#include <iostream><br>using namespace std;<br>class Solution {<br>public:<br>    bool isMatch(string s, string p) {<br>        bool first = false;<br>        if(p.empty()){<br>            return (s.empty());<br>        }<br>        else{<br>            first = (!s.empty() &amp;&amp; (s[0] == p[0] || p[0] == ‘.’));<br>        }<br>        if(p.length()&gt;= 2 &amp;&amp; p[1] == ‘<em>‘){<br>            return (isMatch(s, p.substr(2)) || (first &amp;&amp; isMatch(s.substr(1), p) ) ); // make </em> be 0  || make * be at least 1<br>        }<br>        else return first &amp;&amp; isMatch(s.substr(1), p.substr(1));<br>    }<br>};<br>int main() {<br>    Solution solution;</iostream></p><pre><code>return 0;</code></pre><p>}<br><code>`</code><br>We can see that the compexity is high. Because there are many duplicated calculations. SO we can set an array to solve this problem, this is same with <strong>DYNAMIC PROGRAMMING</strong>, which we will dicuss in there.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Recursion&quot;&gt;&lt;a href=&quot;#Recursion&quot; class=&quot;headerlink&quot; title=&quot;Recursion&quot;&gt;&lt;/a&gt;Recursion&lt;/h2&gt;&lt;p&gt;From my perspective, Recursion is an effic
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dynamic Programming---Leetcode</title>
    <link href="http://yoursite.com/2018/10/30/DP/"/>
    <id>http://yoursite.com/2018/10/30/DP/</id>
    <published>2018-10-30T02:28:18.140Z</published>
    <updated>2018-11-01T12:31:23.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h3><p>The situations are that our current situations depend on the old calculations. So we don’t need to start from the begining again, <strong>we can store the outcome of each step so we can cite it directly.</strong></p><p>Usually, the parameters of the function are the index instead of the object (string etc.) itself. Because our operations are on the matrix.</p><hr><h5 id="Example1-5-Longest-Palindromic-Substring-from-Leetcode"><a href="#Example1-5-Longest-Palindromic-Substring-from-Leetcode" class="headerlink" title="Example1. 5. Longest Palindromic Substring from Leetcode"></a>Example1. <a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="noopener">5. Longest Palindromic Substring</a> from Leetcode</h5><p>We calculation according to the length of the string. If we wanna judge ‘cbbaac’, we can find whether ‘bbaa’ is Palindromic, then find the character from the two ends are same.</p><hr><h5 id="Example2-10-Regular-Expression-Matching-from-the-Leetcode"><a href="#Example2-10-Regular-Expression-Matching-from-the-Leetcode" class="headerlink" title="Example2. 10. Regular Expression Matching from the Leetcode"></a>Example2. <a href="https://leetcode.com/problems/regular-expression-matching/description/" target="_blank" rel="noopener">10. Regular Expression Matching</a> from the Leetcode</h5><p>Just like we talk in  “Recursion”, DP algorithm sometimes help Recursion to decrease the calculation. Such as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(i, j, arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arr[i][j] != null: <span class="comment">## it can returns directly</span></span><br><span class="line">        <span class="keyword">return</span> arr[i][j] </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        calculate the arr[i][j]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dynamic-Programming&quot;&gt;&lt;a href=&quot;#Dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Programming&quot;&gt;&lt;/a&gt;Dynamic Programming&lt;/h3&gt;&lt;p&gt;Th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to apply hexo to Github Page (一)</title>
    <link href="http://yoursite.com/2018/10/20/hexo/"/>
    <id>http://yoursite.com/2018/10/20/hexo/</id>
    <published>2018-10-20T11:56:02.028Z</published>
    <updated>2018-11-01T12:31:31.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="How-to-build-up-your-hexo-on-Github-Page"><a href="#How-to-build-up-your-hexo-on-Github-Page" class="headerlink" title="How to build up your hexo on Github Page"></a>How to build up your hexo on Github Page</h3><p><strong>Firstly, you need to sign up a github account and build a repo which has the same name with your github</strong>.</p><blockquote><p>github name : JasonWang0808<br>gitpage name : JasonWang0808.github.io</p></blockquote><p><strong>Secondly, prepare the hexo</strong></p><p><strong>The set up steps are as followed</strong>:<br><strong>Step1.</strong> Install <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> and <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> and make sure they have been installed properly.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Win+R </span><br><span class="line">cmd</span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">git -<span class="keyword">version</span></span><br></pre></td></tr></table></figure><p><strong>step2.</strong> Prepare the SSH key and goto the github “SSH and GPG keys” to fill in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#open the git bash</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># type enter three times</span></span><br><span class="line">cd C:\Users\Administrator\.ssh</span><br><span class="line">cat id_rsa.pub</span><br><span class="line"><span class="comment"># copy the content</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#evaluate</span></span><br><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br><span class="line"><span class="comment">## return Hi</span></span><br></pre></td></tr></table></figure><p><strong>step3.</strong> Install hexo</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> xxx</span><br><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br><span class="line">hexo init Hexo </span><br><span class="line"><span class="keyword">cd</span> /Hexo </span><br><span class="line">npm instal </span><br><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span>（可简写为hexo <span class="keyword">g</span>） </span><br><span class="line">hexo sever（可简写为hexo s）</span><br><span class="line">npm install –<span class="keyword">save</span> hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>step4.</strong> Modify the config</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use sublime to open /blog/_config.yml and find "deploy"</span></span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p><strong>step5.</strong> modify <strong>./config.yml</strong> and <strong>./themes/next/config.yml</strong> depends on your hobby</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><strong>Step6.</strong> next, you can change your theme and add more decorations to your website  </p><h4 id="A-good-way-to-learn-to-decoration"><a href="#A-good-way-to-learn-to-decoration" class="headerlink" title="A good way to learn to decoration"></a><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">A good way to learn to decoration</a></h4><p><strong>step5.</strong> modify <strong>./config.yml</strong> and <strong>./themes/next/config.yml</strong> depends on your hobby</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><strong>Step7.</strong> start to write on your github page with hexo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"xxx"</span></span><br><span class="line"><span class="comment"># this can help you to build a new xx.md</span></span><br><span class="line">hexo new page <span class="string">"xxx"</span></span><br><span class="line"><span class="comment"># this help you to build a new page, for example, "categories"</span></span><br></pre></td></tr></table></figure><h4 id="Every-xx-md-has-its-head-for-example-Title-is-the-name-Tags-are-tags-you-know-categories-is-a-big-package-containing-all-the-essays-with-this-category"><a href="#Every-xx-md-has-its-head-for-example-Title-is-the-name-Tags-are-tags-you-know-categories-is-a-big-package-containing-all-the-essays-with-this-category" class="headerlink" title="Every xx.md has its head, for example, Title is the name. Tags are tags, you know. categories is a big package containing all the essays with this category"></a>Every xx.md has its head, for example, Title is the name. Tags are tags, you know. categories is a big package containing all the essays with this category</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Notes</span> <span class="string">of</span> <span class="string">LeetCode(一)</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[leetcode,</span> <span class="string">c++,algorithm]</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">leetcodeNotes</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>Finally, you can use Tengxun cloud to get a domain for your page</strong><br>There are two records you need to add<br><img src="https://github.com/JasonWang0808/JasonWang0808.github.io/blob/master/pictures/hexo/how%20to%20build/picture1.png" alt="image"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get the ip address of your page </span></span><br><span class="line">ping www.xx.github.io</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;How-to-build-up-your-hexo-on-Github-Page&quot;&gt;&lt;a href=&quot;#How-to-build-up-your-hexo-on-Github-Page&quot; class=&quot;headerlink&quot; title=&quot;How to build
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Notes of LeetCode (a)</title>
    <link href="http://yoursite.com/2018/10/20/leetcode/"/>
    <id>http://yoursite.com/2018/10/20/leetcode/</id>
    <published>2018-10-20T11:13:06.252Z</published>
    <updated>2018-11-01T12:31:11.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h3><p>Ⅰ.  <strong>DATA STRUCTURE: HashMap</strong></p><blockquote><p>HashMap is a quick way to find elements in the time complexity of O(1) and is commonly used in leetcode.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Charactor,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br></pre></td></tr></table></figure><p>Ⅱ. <strong>Method:Sliding Window</strong><br>The sliding window is an abstract concept <strong>commonly used in array/String problem</strong>s. It likes <strong>Dynamic Programming</strong>, because we don’t know the answer until we finish it.</p><p>The length is <strong>j - i</strong> because the arrange is [i, j) (left-closed, right-open). We set the <strong>ANS</strong> to record the longest answer.</p><p>Once we find our next number is replucated in our map, we change the i to the number in our map, same with truncating. Then next, until we reach the end of the array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//map.put  map.get    map.containsKey</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = s.length();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; l &amp;&amp; j &lt; l)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(j)))&#123; <span class="comment">//if next element in the map</span></span><br><span class="line">                i = Math.max(map.get(s.charAt(j)) + <span class="number">1</span>, i); <span class="comment">// abba, max is to prevent : "a" in the end makes i be '0'</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j-i+<span class="number">1</span>); <span class="comment">// keep the bigger ans</span></span><br><span class="line">            map.put(s.charAt(j), j); <span class="comment">// refresh the map</span></span><br><span class="line">            j ++; <span class="comment">// goto next number</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;3-Longest-Substring-Without-Repeating-Characters&quot;&gt;&lt;a href=&quot;#3-Longest-Substring-Without-Repeating-Characters&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="http://yoursite.com/2018/10/19/New%20begining/"/>
    <id>http://yoursite.com/2018/10/19/New begining/</id>
    <published>2018-10-19T14:00:04.183Z</published>
    <updated>2018-10-20T09:06:37.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-JunYu-Wang’s-site"><a href="#Welcome-to-JunYu-Wang’s-site" class="headerlink" title="Welcome to JunYu Wang’s site"></a>Welcome to JunYu Wang’s site</h2><h3 id="I-am-proud-that-I’ve-keep-writing-blogs-for-almost-half-year-in-2018-The-content-are-as-followed"><a href="#I-am-proud-that-I’ve-keep-writing-blogs-for-almost-half-year-in-2018-The-content-are-as-followed" class="headerlink" title="I am proud that I’ve keep writing blogs for almost half year in 2018. The content are as followed."></a>I am proud that I’ve keep writing blogs for almost half year in 2018. The content are as followed.</h3><ul><li style="list-style: none"><input type="checkbox" checked> Notes of the CS system and data structure from the class</li><li style="list-style: none"><input type="checkbox" checked> Notes of the Deep-learning courses from Udacity</li><li style="list-style: none"><input type="checkbox" checked> ….</li></ul><hr><h3 id="The-reason-why-today-is-very-important-is-that-I-realize-that-my-blogs-shouldn’t-have-been-regarded-as-merely-“records-of-my-study”-It-should-be-more-formal-more-beautiful-more-ordered-and-most-importantly-more-inspiring"><a href="#The-reason-why-today-is-very-important-is-that-I-realize-that-my-blogs-shouldn’t-have-been-regarded-as-merely-“records-of-my-study”-It-should-be-more-formal-more-beautiful-more-ordered-and-most-importantly-more-inspiring" class="headerlink" title="The reason why today is very important is that I realize that my blogs shouldn’t have been regarded as merely “records of my study”. It should be more formal, more beautiful, more ordered, and most importantly, more inspiring."></a>The reason why today is very important is that I realize that my blogs shouldn’t have been regarded as merely “records of my study”. It should be more formal, more beautiful, more ordered, and most importantly, more inspiring.</h3><h4 id="I-always-like-new-beginings-and-new-challanges-which-make-me-feel-alive-So-I-want-to-delve-furture-into-some-specific-areas-of-study-to-equip-myself-to-be-more-professional"><a href="#I-always-like-new-beginings-and-new-challanges-which-make-me-feel-alive-So-I-want-to-delve-furture-into-some-specific-areas-of-study-to-equip-myself-to-be-more-professional" class="headerlink" title="I always like new beginings and new challanges, which make me feel alive. So I want to delve furture into some specific areas of study to equip myself to be more professional."></a>I always like new beginings and new challanges, which make me feel alive. So I want to delve furture into some specific areas of study to equip myself to be more professional.</h4><ul><li style="list-style: none"><input type="checkbox"> Notes of how to deal with the problems on Leetcode</li><li style="list-style: none"><input type="checkbox"> Notes of deeper details of algorithm such as object detection</li><li style="list-style: none"><input type="checkbox"> Notes of new classes in new school</li><li style="list-style: none"><input type="checkbox"> …..</li><li></li></ul><p><strong>CLICK “About” to see my RESUME</strong></p><p><strong>CLICK “Categories” to see all the topics of my articles</strong> </p><p><strong>CLICK “Tags”… OOPS, this is under building</strong></p><p><strong>CLICK “Search” to find the topic you have interests on</strong></p><p><em>Hope you Enjoy this</em></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (you have any questions)</span><br><span class="line">&#123;</span><br><span class="line">    case email:</span><br><span class="line">        wangjunyu0808@gmail.com;</span><br><span class="line">    case insgram:</span><br><span class="line">        wangjunyu0808;</span><br><span class="line">    case wechat:</span><br><span class="line">        HeNeArKrXnTn</span><br><span class="line">    default;</span><br><span class="line">&#125;</span><br><span class="line">I will be happy <span class="keyword">to</span> share ideas with you</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Welcome-to-JunYu-Wang’s-site&quot;&gt;&lt;a href=&quot;#Welcome-to-JunYu-Wang’s-site&quot; class=&quot;headerlink&quot; title=&quot;Welcome to JunYu Wang’s site&quot;&gt;&lt;/a&gt;We
      
    
    </summary>
    
    
  </entry>
  
</feed>
